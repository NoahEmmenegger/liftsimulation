
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000cce  00000d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800094  00800094  00000d96  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000d96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ac9  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f20  00000000  00000000  00003b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010df  00000000  00000000  00004a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  00005b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001089  00000000  00000000  000060f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001582  00000000  00000000  00007181  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 65 06 	jmp	0xcca	; 0xcca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



int main(void)
{
    InitializePorts();
  92:	0e 94 f5 02 	call	0x5ea	; 0x5ea <InitializePorts>
	Usart_Init();
  96:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <Usart_Init>
	RegisterTestHandler( TestFunction );
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  a2:	8f e6       	ldi	r24, 0x6F	; 111
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 4a 02 	call	0x494	; 0x494 <RegisterFsm>
	//RegisterFsm(&_buttonCtrl.fsm);
	RegisterFsm(&_mainCtrl.fsm);
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 4a 02 	call	0x494	; 0x494 <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  b2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <InitializeStart>
	
	
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <MainCtrl_Initializing>:
}

FloorType GetTargetSelection(uint8_t buttonEventParameter )
{
	return FindBit(buttonEventParameter);
}
  bc:	fc 01       	movw	r30, r24
  be:	81 81       	ldd	r24, Z+1	; 0x01
  c0:	82 3c       	cpi	r24, 0xC2	; 194
  c2:	19 f4       	brne	.+6      	; 0xca <MainCtrl_Initializing+0xe>
  c4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
  c8:	08 95       	ret
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	49 f4       	brne	.+18     	; 0xe0 <MainCtrl_Initializing+0x24>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <EnableStatusUpdate>
  d4:	67 ea       	ldi	r22, 0xA7	; 167
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
  e0:	08 95       	ret

000000e2 <MainCtrl_ElevatorMoving>:
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	19 f4       	brne	.+6      	; 0x100 <MainCtrl_ElevatorMoving+0x1e>
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 100:	e0 e6       	ldi	r30, 0x60	; 96
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	95 81       	ldd	r25, Z+5	; 0x05
 106:	86 81       	ldd	r24, Z+6	; 0x06
 108:	98 13       	cpse	r25, r24
 10a:	0b c0       	rjmp	.+22     	; 0x122 <MainCtrl_ElevatorMoving+0x40>
 10c:	6c ef       	ldi	r22, 0xFC	; 252
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	cf 01       	movw	r24, r30
 112:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
 116:	88 e8       	ldi	r24, 0x88	; 136
 118:	93 e1       	ldi	r25, 0x13	; 19
 11a:	0e 94 c1 05 	call	0xb82	; 0xb82 <StartTimer>
 11e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <FindBit>:
 128:	88 23       	and	r24, r24
 12a:	49 f0       	breq	.+18     	; 0x13e <FindBit+0x16>
 12c:	80 fd       	sbrc	r24, 0
 12e:	09 c0       	rjmp	.+18     	; 0x142 <FindBit+0x1a>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	86 95       	lsr	r24
 134:	9f 5f       	subi	r25, 0xFF	; 255
 136:	80 ff       	sbrs	r24, 0
 138:	fc cf       	rjmp	.-8      	; 0x132 <FindBit+0xa>
 13a:	89 2f       	mov	r24, r25
 13c:	08 95       	ret
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	08 95       	ret
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret

00000146 <GetFloorReservation>:
 146:	0e 94 94 00 	call	0x128	; 0x128 <FindBit>
 14a:	84 50       	subi	r24, 0x04	; 4
 14c:	08 95       	ret

0000014e <MainCtrl_AwaitElevatorRequest>:
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	80 ea       	ldi	r24, 0xA0	; 160
 15a:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	87 3c       	cpi	r24, 0xC7	; 199
 168:	d1 f4       	brne	.+52     	; 0x19e <MainCtrl_AwaitElevatorRequest+0x50>
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	c9 f5       	brne	.+114    	; 0x1e2 <MainCtrl_AwaitElevatorRequest+0x94>
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	98 2f       	mov	r25, r24
 174:	90 7f       	andi	r25, 0xF0	; 240
 176:	a9 f1       	breq	.+106    	; 0x1e2 <MainCtrl_AwaitElevatorRequest+0x94>
 178:	0e 94 a3 00 	call	0x146	; 0x146 <GetFloorReservation>
 17c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 180:	89 17       	cp	r24, r25
 182:	49 f0       	breq	.+18     	; 0x196 <MainCtrl_AwaitElevatorRequest+0x48>
 184:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	48 2f       	mov	r20, r24
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
 194:	04 c0       	rjmp	.+8      	; 0x19e <MainCtrl_AwaitElevatorRequest+0x50>
 196:	68 2f       	mov	r22, r24
 198:	80 e1       	ldi	r24, 0x10	; 16
 19a:	0e 94 af 02 	call	0x55e	; 0x55e <SetDoorState>
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	88 3c       	cpi	r24, 0xC8	; 200
 1a2:	71 f4       	brne	.+28     	; 0x1c0 <MainCtrl_AwaitElevatorRequest+0x72>
 1a4:	81 ea       	ldi	r24, 0xA1	; 161
 1a6:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 1aa:	00 e6       	ldi	r16, 0x60	; 96
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	f8 01       	movw	r30, r16
 1b0:	85 81       	ldd	r24, Z+5	; 0x05
 1b2:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 1b6:	f8 01       	movw	r30, r16
 1b8:	65 81       	ldd	r22, Z+5	; 0x05
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	0e 94 af 02 	call	0x55e	; 0x55e <SetDoorState>
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	71 f4       	brne	.+28     	; 0x1e2 <MainCtrl_AwaitElevatorRequest+0x94>
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	89 13       	cpse	r24, r25
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <MainCtrl_AwaitElevatorRequest+0x94>
 1ce:	c0 e6       	ldi	r28, 0x60	; 96
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	82 95       	swap	r24
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	8d 83       	std	Y+5, r24	; 0x05
 1d8:	88 e8       	ldi	r24, 0x88	; 136
 1da:	93 e1       	ldi	r25, 0x13	; 19
 1dc:	0e 94 c1 05 	call	0xb82	; 0xb82 <StartTimer>
 1e0:	8f 83       	std	Y+7, r24	; 0x07
 1e2:	6c ef       	ldi	r22, 0xFC	; 252
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	80 e6       	ldi	r24, 0x60	; 96
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <MainCtrl_AwaitTargetSelection>:
	}
	SetState(&_mainCtrl.fsm, MainCtrl_AwaitTargetSelection);
}

void MainCtrl_AwaitTargetSelection(Message* msg)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
	Usart_PutChar(0xB0);
 1fe:	80 eb       	ldi	r24, 0xB0	; 176
 200:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
	Usart_PutChar(msg->Id);
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
	
	if( msg->Id == Message_ElevatorHasStartedToMove)
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	a9 f4       	brne	.+42     	; 0x23a <MainCtrl_AwaitTargetSelection+0x42>
	{
		if (msg->MsgParamLow == true)
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	39 f4       	brne	.+14     	; 0x224 <MainCtrl_AwaitTargetSelection+0x2c>
		{
			
			SetState(&_mainCtrl.fsm, MainCtrl_ElevatorMoving);
 216:	61 e7       	ldi	r22, 0x71	; 113
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	80 e6       	ldi	r24, 0x60	; 96
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
 222:	0b c0       	rjmp	.+22     	; 0x23a <MainCtrl_AwaitTargetSelection+0x42>
			}else {
			SetState(&_mainCtrl.fsm, MainCtrl_AwaitElevatorRequest);
 224:	67 ea       	ldi	r22, 0xA7	; 167
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
			SetDoorState(DoorClosed, _mainCtrl.currentFloor);
 230:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	0e 94 af 02 	call	0x55e	; 0x55e <SetDoorState>
		}
	}
	
	if( IS_BUTTON_PRESS( msg ) )
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	87 3c       	cpi	r24, 0xC7	; 199
 23e:	c9 f4       	brne	.+50     	; 0x272 <MainCtrl_AwaitTargetSelection+0x7a>
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	b1 f4       	brne	.+44     	; 0x272 <MainCtrl_AwaitTargetSelection+0x7a>
	{
		if( IS_TARGET_SELECTION(msg->MsgParamLow))
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	98 2f       	mov	r25, r24
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	91 f0       	breq	.+36     	; 0x272 <MainCtrl_AwaitTargetSelection+0x7a>
	return FindBit(buttonEventParameter) - 4;
}

FloorType GetTargetSelection(uint8_t buttonEventParameter )
{
	return FindBit(buttonEventParameter);
 24e:	0e 94 94 00 	call	0x128	; 0x128 <FindBit>
	if( IS_BUTTON_PRESS( msg ) )
	{
		if( IS_TARGET_SELECTION(msg->MsgParamLow))
		{
			FloorType reservation = GetTargetSelection(msg->MsgParamLow);
			if( reservation != _mainCtrl.currentFloor )
 252:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 256:	68 17       	cp	r22, r24
 258:	49 f0       	breq	.+18     	; 0x26c <MainCtrl_AwaitTargetSelection+0x74>
			{
				_mainCtrl.nextFloor = reservation;
 25a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
				SendEvent(SignalSourceApp, Message_MoveTo, _mainCtrl.nextFloor, 0);
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	48 2f       	mov	r20, r24
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
 26a:	03 c0       	rjmp	.+6      	; 0x272 <MainCtrl_AwaitTargetSelection+0x7a>
			}
			else if( reservation == _mainCtrl.currentFloor)
			{
				SetDoorState(DoorOpen, _mainCtrl.currentFloor);
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	0e 94 af 02 	call	0x55e	; 0x55e <SetDoorState>
			
		}
	}
	
	// TODO: was soll hier passieren
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	d8 2f       	mov	r29, r24
 280:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/POS_STEPS_PER_FLOOR;
 282:	c8 2f       	mov	r28, r24
 284:	c2 95       	swap	r28
 286:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
 288:	8c 2f       	mov	r24, r28
 28a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
 28e:	8d 2f       	mov	r24, r29
 290:	6c 2f       	mov	r22, r28
 292:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__udivmodqi4>
 296:	91 11       	cpse	r25, r1
 298:	08 c0       	rjmp	.+16     	; 0x2aa <NotifyCalibrationDone+0x32>
 29a:	c1 11       	cpse	r28, r1
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 29e:	21 2f       	mov	r18, r17
 2a0:	4d 2f       	mov	r20, r29
 2a2:	62 ec       	ldi	r22, 0xC2	; 194
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
	}
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	08 95       	ret

000002b2 <OnElevatorPositionChanged>:
		_motorCtrl.start = Floor0;
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 2b2:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 2b4:	48 2f       	mov	r20, r24
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
 2be:	08 95       	ret

000002c0 <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 2c0:	fc 01       	movw	r30, r24
 2c2:	81 81       	ldd	r24, Z+1	; 0x01
 2c4:	81 3c       	cpi	r24, 0xC1	; 193
 2c6:	29 f4       	brne	.+10     	; 0x2d2 <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 2c8:	8c e3       	ldi	r24, 0x3C	; 60
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <CalibrateElevatorPosition>
		return;
 2d0:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 2d2:	82 3c       	cpi	r24, 0xC2	; 194
 2d4:	89 f4       	brne	.+34     	; 0x2f8 <MotorCtrl_Initializing+0x38>
	{
		SetDisplay(Floor0);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SetDisplay>
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	80 e2       	ldi	r24, 0x20	; 32
 2e4:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 2e8:	6d e7       	ldi	r22, 0x7D	; 125
 2ea:	71 e0       	ldi	r23, 0x01	; 1
 2ec:	8f e6       	ldi	r24, 0x6F	; 111
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
		_motorCtrl.start = Floor0;
 2f4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <_motorCtrl+0x5>
 2f8:	08 95       	ret

000002fa <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 2fe:	fc 01       	movw	r30, r24
 300:	21 81       	ldd	r18, Z+1	; 0x01
 302:	21 30       	cpi	r18, 0x01	; 1
 304:	79 f4       	brne	.+30     	; 0x324 <MotorCtrl_Stopped+0x2a>
 306:	82 81       	ldd	r24, Z+2	; 0x02
 308:	84 30       	cpi	r24, 0x04	; 4
 30a:	60 f4       	brcc	.+24     	; 0x324 <MotorCtrl_Stopped+0x2a>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 30c:	cf e6       	ldi	r28, 0x6F	; 111
 30e:	d0 e0       	ldi	r29, 0x00	; 0
 310:	8e 83       	std	Y+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, MotorCtrl_AwaitClosed);
 312:	68 ed       	ldi	r22, 0xD8	; 216
 314:	71 e0       	ldi	r23, 0x01	; 1
 316:	ce 01       	movw	r24, r28
 318:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
		SetDoorState(DoorClosed, _motorCtrl.start);		
 31c:	6d 81       	ldd	r22, Y+5	; 0x05
 31e:	80 e2       	ldi	r24, 0x20	; 32
 320:	0e 94 af 02 	call	0x55e	; 0x55e <SetDoorState>
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <MotorCtrl_AwaitOpen>:


void MotorCtrl_AwaitOpen(Message* msg)
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	ec 01       	movw	r28, r24
	Usart_PutChar(0x70);
 330:	80 e7       	ldi	r24, 0x70	; 112
 332:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
	Usart_PutChar(msg->Id);
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
	if( msg->Id == LiftDoorEvent && msg->MsgParamLow == DoorOpen)
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	85 3c       	cpi	r24, 0xC5	; 197
 340:	89 f4       	brne	.+34     	; 0x364 <MotorCtrl_AwaitOpen+0x3a>
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	80 31       	cpi	r24, 0x10	; 16
 346:	71 f4       	brne	.+28     	; 0x364 <MotorCtrl_AwaitOpen+0x3a>
	{
		_motorCtrl.start = msg->MsgParamHigh;
 348:	4b 81       	ldd	r20, Y+3	; 0x03
 34a:	40 93 74 00 	sts	0x0074, r20	; 0x800074 <_motorCtrl+0x5>
		SendEvent(SignalSourceApp, Message_ElevatorReady, _motorCtrl.start, 0);
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	80 e2       	ldi	r24, 0x20	; 32
 354:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
				
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 358:	6d e7       	ldi	r22, 0x7D	; 125
 35a:	71 e0       	ldi	r23, 0x01	; 1
 35c:	8f e6       	ldi	r24, 0x6F	; 111
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
			
	}
	//SendEvent(SignalSourceElevator, Message_ElevatorHasStartedToMove, false, 0);
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <MotorCtrl_Moving>:
	
}
	

void MotorCtrl_Moving(Message* msg)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
	Usart_PutChar(msg->Id);
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
	// ist angekommen
	SetDisplay(msg->MsgParamLow/POS_STEPS_PER_FLOOR);
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	82 95       	swap	r24
 37a:	8f 70       	andi	r24, 0x0F	; 15
 37c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SetDisplay>
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	91 f4       	brne	.+36     	; 0x3aa <MotorCtrl_Moving+0x40>
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	9b 81       	ldd	r25, Y+3	; 0x03
 38a:	89 13       	cpse	r24, r25
 38c:	0e c0       	rjmp	.+28     	; 0x3aa <MotorCtrl_Moving+0x40>
	{
		
		_motorCtrl.target = (FloorType)msg->MsgParamLow/POS_STEPS_PER_FLOOR;
 38e:	cf e6       	ldi	r28, 0x6F	; 111
 390:	d0 e0       	ldi	r29, 0x00	; 0
 392:	82 95       	swap	r24
 394:	8f 70       	andi	r24, 0x0F	; 15
 396:	8e 83       	std	Y+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, MotorCtrl_AwaitOpen);
 398:	65 e9       	ldi	r22, 0x95	; 149
 39a:	71 e0       	ldi	r23, 0x01	; 1
 39c:	ce 01       	movw	r24, r28
 39e:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
		SetDoorState(DoorOpen, _motorCtrl.target);
 3a2:	6e 81       	ldd	r22, Y+6	; 0x06
 3a4:	80 e1       	ldi	r24, 0x10	; 16
 3a6:	0e 94 af 02 	call	0x55e	; 0x55e <SetDoorState>
		
	}	
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <MotorCtrl_AwaitClosed>:
	}
	//SendEvent(SignalSourceElevator, Message_ElevatorHasStartedToMove, false, 0);
}

void MotorCtrl_AwaitClosed(Message* msg)
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
		Usart_PutChar(0x60);
 3b6:	80 e6       	ldi	r24, 0x60	; 96
 3b8:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
		Usart_PutChar(msg->Id);
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
	if(msg->Id == LiftDoorEvent && msg->MsgParamLow == DoorClosed)
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	85 3c       	cpi	r24, 0xC5	; 197
 3c6:	49 f5       	brne	.+82     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	80 32       	cpi	r24, 0x20	; 32
 3cc:	31 f5       	brne	.+76     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		if(_motorCtrl.start == _motorCtrl.target )
 3ce:	ef e6       	ldi	r30, 0x6F	; 111
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	95 81       	ldd	r25, Z+5	; 0x05
 3d4:	86 81       	ldd	r24, Z+6	; 0x06
 3d6:	98 13       	cpse	r25, r24
 3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <MotorCtrl_AwaitClosed+0x42>
		{
			SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 3da:	6d e7       	ldi	r22, 0x7D	; 125
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	cf 01       	movw	r24, r30
 3e0:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
			//SendEvent(SignalSourceElevator, Message_ElevatorHasStartedToMove, true, 0);
			SendEvent(SignalSourceElevator, Message_ElevatorHasStartedToMove, 0, 0);
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		}
		else{
			
			SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 3f2:	65 eb       	ldi	r22, 0xB5	; 181
 3f4:	71 e0       	ldi	r23, 0x01	; 1
 3f6:	8f e6       	ldi	r24, 0x6F	; 111
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 3a 02 	call	0x474	; 0x474 <SetState>
			MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 3fe:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <_motorCtrl+0x6>
 402:	69 e5       	ldi	r22, 0x59	; 89
 404:	71 e0       	ldi	r23, 0x01	; 1
 406:	82 95       	swap	r24
 408:	80 7f       	andi	r24, 0xF0	; 240
 40a:	0e 94 cc 02 	call	0x598	; 0x598 <MoveElevator>
			SendEvent(SignalSourceElevator, Message_ElevatorHasStartedToMove, true, 0);
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	64 e0       	ldi	r22, 0x04	; 4
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
		}
	}
	
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <TestFunction>:
{
	
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
 426:	90 81       	ld	r25, Z
 428:	91 30       	cpi	r25, 0x01	; 1
 42a:	49 f4       	brne	.+18     	; 0x43e <TestFunction+0x1e>
 42c:	c8 e8       	ldi	r28, 0x88	; 136
 42e:	d0 e0       	ldi	r29, 0x00	; 0
 430:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
 432:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
 436:	89 91       	ld	r24, Y+
 438:	81 11       	cpse	r24, r1
 43a:	fb cf       	rjmp	.-10     	; 0x432 <TestFunction+0x12>
 43c:	08 c0       	rjmp	.+16     	; 0x44e <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
 43e:	92 30       	cpi	r25, 0x02	; 2
 440:	31 f4       	brne	.+12     	; 0x44e <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	41 81       	ldd	r20, Z+1	; 0x01
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
	}
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <EnterAtomic>:
 454:	f8 94       	cli
 456:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 45a:	8f 5f       	subi	r24, 0xFF	; 255
 45c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 460:	08 95       	ret

00000462 <LeaveAtomic>:
 462:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 466:	81 50       	subi	r24, 0x01	; 1
 468:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 46c:	81 11       	cpse	r24, r1
 46e:	01 c0       	rjmp	.+2      	; 0x472 <LeaveAtomic+0x10>
 470:	78 94       	sei
 472:	08 95       	ret

00000474 <SetState>:
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ec 01       	movw	r28, r24
 47e:	8b 01       	movw	r16, r22
 480:	0e 94 2a 02 	call	0x454	; 0x454 <EnterAtomic>
 484:	1c 83       	std	Y+4, r17	; 0x04
 486:	0b 83       	std	Y+3, r16	; 0x03
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	0c 94 31 02 	jmp	0x462	; 0x462 <LeaveAtomic>

00000494 <RegisterFsm>:
 494:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <anchor>
 498:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <anchor+0x1>
 49c:	a6 e7       	ldi	r26, 0x76	; 118
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	e6 37       	cpi	r30, 0x76	; 118
 4a4:	f2 07       	cpc	r31, r18
 4a6:	29 f0       	breq	.+10     	; 0x4b2 <RegisterFsm+0x1e>
 4a8:	df 01       	movw	r26, r30
 4aa:	01 90       	ld	r0, Z+
 4ac:	f0 81       	ld	r31, Z
 4ae:	e0 2d       	mov	r30, r0
 4b0:	f7 cf       	rjmp	.-18     	; 0x4a0 <RegisterFsm+0xc>
 4b2:	8d 93       	st	X+, r24
 4b4:	9c 93       	st	X, r25
 4b6:	dc 01       	movw	r26, r24
 4b8:	ed 93       	st	X+, r30
 4ba:	fc 93       	st	X, r31
 4bc:	08 95       	ret

000004be <DispatchEvent>:
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	0e 94 2a 02 	call	0x454	; 0x454 <EnterAtomic>
 4ca:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <msgQ_out>
 4ce:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 4d2:	98 17       	cp	r25, r24
 4d4:	59 f0       	breq	.+22     	; 0x4ec <DispatchEvent+0x2e>
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	98 9f       	mul	r25, r24
 4da:	e0 01       	movw	r28, r0
 4dc:	11 24       	eor	r1, r1
 4de:	c1 55       	subi	r28, 0x51	; 81
 4e0:	df 4f       	sbci	r29, 0xFF	; 255
 4e2:	9f 5f       	subi	r25, 0xFF	; 255
 4e4:	9f 71       	andi	r25, 0x1F	; 31
 4e6:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <msgQ_out>
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DispatchEvent+0x32>
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
 4f0:	0e 94 31 02 	call	0x462	; 0x462 <LeaveAtomic>
 4f4:	20 97       	sbiw	r28, 0x00	; 0
 4f6:	c9 f0       	breq	.+50     	; 0x52a <DispatchEvent+0x6c>
 4f8:	00 91 76 00 	lds	r16, 0x0076	; 0x800076 <anchor>
 4fc:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <anchor+0x1>
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	06 37       	cpi	r16, 0x76	; 118
 504:	1f 07       	cpc	r17, r31
 506:	89 f0       	breq	.+34     	; 0x52a <DispatchEvent+0x6c>
 508:	d8 01       	movw	r26, r16
 50a:	12 96       	adiw	r26, 0x02	; 2
 50c:	9c 91       	ld	r25, X
 50e:	12 97       	sbiw	r26, 0x02	; 2
 510:	88 81       	ld	r24, Y
 512:	89 23       	and	r24, r25
 514:	31 f0       	breq	.+12     	; 0x522 <DispatchEvent+0x64>
 516:	13 96       	adiw	r26, 0x03	; 3
 518:	ed 91       	ld	r30, X+
 51a:	fc 91       	ld	r31, X
 51c:	14 97       	sbiw	r26, 0x04	; 4
 51e:	ce 01       	movw	r24, r28
 520:	09 95       	icall
 522:	f8 01       	movw	r30, r16
 524:	00 81       	ld	r16, Z
 526:	11 81       	ldd	r17, Z+1	; 0x01
 528:	eb cf       	rjmp	.-42     	; 0x500 <DispatchEvent+0x42>
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	08 95       	ret

00000534 <InitializeCounter>:
 534:	12 be       	out	0x32, r1	; 50
 536:	8b e0       	ldi	r24, 0x0B	; 11
 538:	83 bf       	out	0x33, r24	; 51
 53a:	8d e7       	ldi	r24, 0x7D	; 125
 53c:	8c bf       	out	0x3c, r24	; 60
 53e:	89 b7       	in	r24, 0x39	; 57
 540:	82 60       	ori	r24, 0x02	; 2
 542:	89 bf       	out	0x39, r24	; 57
 544:	80 e8       	ldi	r24, 0x80	; 128
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	9b bd       	out	0x2b, r25	; 43
 54a:	8a bd       	out	0x2a, r24	; 42
 54c:	1d bc       	out	0x2d, r1	; 45
 54e:	1c bc       	out	0x2c, r1	; 44
 550:	1f bc       	out	0x2f, r1	; 47
 552:	8d e0       	ldi	r24, 0x0D	; 13
 554:	8e bd       	out	0x2e, r24	; 46
 556:	89 b7       	in	r24, 0x39	; 57
 558:	80 61       	ori	r24, 0x10	; 16
 55a:	89 bf       	out	0x39, r24	; 57
 55c:	08 95       	ret

0000055e <SetDoorState>:
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	d8 2f       	mov	r29, r24
 564:	c6 2f       	mov	r28, r22
 566:	0e 94 2a 02 	call	0x454	; 0x454 <EnterAtomic>
 56a:	6c 2f       	mov	r22, r28
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	8d 2f       	mov	r24, r29
 570:	80 73       	andi	r24, 0x30	; 48
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	fb 01       	movw	r30, r22
 578:	ec 58       	subi	r30, 0x8C	; 140
 57a:	fe 4f       	sbci	r31, 0xFE	; 254
 57c:	90 81       	ld	r25, Z
 57e:	98 23       	and	r25, r24
 580:	11 f4       	brne	.+4      	; 0x586 <SetDoorState+0x28>
 582:	94 e0       	ldi	r25, 0x04	; 4
 584:	91 83       	std	Z+1, r25	; 0x01
 586:	fb 01       	movw	r30, r22
 588:	ec 58       	subi	r30, 0x8C	; 140
 58a:	fe 4f       	sbci	r31, 0xFE	; 254
 58c:	81 60       	ori	r24, 0x01	; 1
 58e:	80 83       	st	Z, r24
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	0c 94 31 02 	jmp	0x462	; 0x462 <LeaveAtomic>

00000598 <MoveElevator>:
 598:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 59c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Elevator+0x4>
 5a0:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <Elevator+0x6>
 5a4:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <Elevator+0x5>
 5a8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 5ac:	98 17       	cp	r25, r24
 5ae:	10 f4       	brcc	.+4      	; 0x5b4 <MoveElevator+0x1c>
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <MoveElevator+0x22>
 5b4:	89 17       	cp	r24, r25
 5b6:	18 f4       	brcc	.+6      	; 0x5be <MoveElevator+0x26>
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Elevator+0x4>
 5be:	08 95       	ret

000005c0 <CalibrateElevatorPosition>:
 5c0:	bc 01       	movw	r22, r24
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0c 94 cc 02 	jmp	0x598	; 0x598 <MoveElevator>

000005c8 <SetDisplay>:
 5c8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <liftDisplay7Seg>
 5cc:	08 95       	ret

000005ce <RegisterTestHandler>:
 5ce:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_testHandler+0x1>
 5d2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_testHandler>
 5d6:	08 95       	ret

000005d8 <Usart_Init>:
 5d8:	10 bc       	out	0x20, r1	; 32
 5da:	8c e0       	ldi	r24, 0x0C	; 12
 5dc:	89 b9       	out	0x09, r24	; 9
 5de:	86 e8       	ldi	r24, 0x86	; 134
 5e0:	80 bd       	out	0x20, r24	; 32
 5e2:	88 e9       	ldi	r24, 0x98	; 152
 5e4:	8a b9       	out	0x0a, r24	; 10
 5e6:	78 94       	sei
 5e8:	08 95       	ret

000005ea <InitializePorts>:
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	87 bb       	out	0x17, r24	; 23
 5ee:	84 bb       	out	0x14, r24	; 20
 5f0:	8a bb       	out	0x1a, r24	; 26
 5f2:	11 ba       	out	0x11, r1	; 17
 5f4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <Usart_Init>
 5f8:	85 b7       	in	r24, 0x35	; 53
 5fa:	83 60       	ori	r24, 0x03	; 3
 5fc:	85 bf       	out	0x35, r24	; 53
 5fe:	8b b7       	in	r24, 0x3b	; 59
 600:	80 64       	ori	r24, 0x40	; 64
 602:	8b bf       	out	0x3b, r24	; 59
 604:	08 95       	ret

00000606 <Usart_PutChar>:
 606:	8c b9       	out	0x0c, r24	; 12
 608:	5d 9b       	sbis	0x0b, 5	; 11
 60a:	fe cf       	rjmp	.-4      	; 0x608 <Usart_PutChar+0x2>
 60c:	08 95       	ret

0000060e <SendEvent>:
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	c8 2f       	mov	r28, r24
 618:	06 2f       	mov	r16, r22
 61a:	d4 2f       	mov	r29, r20
 61c:	12 2f       	mov	r17, r18
 61e:	0e 94 2a 02 	call	0x454	; 0x454 <EnterAtomic>
 622:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 626:	e8 2f       	mov	r30, r24
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	af 01       	movw	r20, r30
 62c:	4f 5f       	subi	r20, 0xFF	; 255
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	4f 71       	andi	r20, 0x1F	; 31
 632:	55 27       	eor	r21, r21
 634:	20 91 ad 00 	lds	r18, 0x00AD	; 0x8000ad <msgQ_out>
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	42 17       	cp	r20, r18
 63c:	53 07       	cpc	r21, r19
 63e:	71 f4       	brne	.+28     	; 0x65c <SendEvent+0x4e>
 640:	8f ef       	ldi	r24, 0xFF	; 255
 642:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 652:	8e ed       	ldi	r24, 0xDE	; 222
 654:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 658:	8d ea       	ldi	r24, 0xAD	; 173
 65a:	f9 cf       	rjmp	.-14     	; 0x64e <SendEvent+0x40>
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	e1 55       	subi	r30, 0x51	; 81
 666:	ff 4f       	sbci	r31, 0xFF	; 255
 668:	01 83       	std	Z+1, r16	; 0x01
 66a:	13 83       	std	Z+3, r17	; 0x03
 66c:	d2 83       	std	Z+2, r29	; 0x02
 66e:	c0 83       	st	Z, r28
 670:	8f 5f       	subi	r24, 0xFF	; 255
 672:	8f 71       	andi	r24, 0x1F	; 31
 674:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <msgQ_in>
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	0c 94 31 02 	jmp	0x462	; 0x462 <LeaveAtomic>

00000684 <MakeDoorStates>:
 684:	df 92       	push	r13
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	c4 e7       	ldi	r28, 0x74	; 116
 694:	d1 e0       	ldi	r29, 0x01	; 1
 696:	00 e0       	ldi	r16, 0x00	; 0
 698:	10 e0       	ldi	r17, 0x00	; 0
 69a:	ee 24       	eor	r14, r14
 69c:	e3 94       	inc	r14
 69e:	f1 2c       	mov	r15, r1
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	81 11       	cpse	r24, r1
 6a4:	24 c0       	rjmp	.+72     	; 0x6ee <MakeDoorStates+0x6a>
 6a6:	48 81       	ld	r20, Y
 6a8:	40 ff       	sbrs	r20, 0
 6aa:	23 c0       	rjmp	.+70     	; 0x6f2 <MakeDoorStates+0x6e>
 6ac:	4e 7f       	andi	r20, 0xFE	; 254
 6ae:	48 83       	st	Y, r20
 6b0:	20 2f       	mov	r18, r16
 6b2:	65 ec       	ldi	r22, 0xC5	; 197
 6b4:	80 e1       	ldi	r24, 0x10	; 16
 6b6:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
 6ba:	88 81       	ld	r24, Y
 6bc:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <OpenDoors>
 6c0:	84 ff       	sbrs	r24, 4
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <MakeDoorStates+0x54>
 6c4:	97 01       	movw	r18, r14
 6c6:	00 2e       	mov	r0, r16
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <MakeDoorStates+0x48>
 6ca:	22 0f       	add	r18, r18
 6cc:	0a 94       	dec	r0
 6ce:	ea f7       	brpl	.-6      	; 0x6ca <MakeDoorStates+0x46>
 6d0:	24 2b       	or	r18, r20
 6d2:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <OpenDoors>
 6d6:	0d c0       	rjmp	.+26     	; 0x6f2 <MakeDoorStates+0x6e>
 6d8:	c7 01       	movw	r24, r14
 6da:	00 2e       	mov	r0, r16
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <MakeDoorStates+0x5c>
 6de:	88 0f       	add	r24, r24
 6e0:	0a 94       	dec	r0
 6e2:	ea f7       	brpl	.-6      	; 0x6de <MakeDoorStates+0x5a>
 6e4:	80 95       	com	r24
 6e6:	84 23       	and	r24, r20
 6e8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <OpenDoors>
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <MakeDoorStates+0x6e>
 6ee:	81 50       	subi	r24, 0x01	; 1
 6f0:	89 83       	std	Y+1, r24	; 0x01
 6f2:	0f 5f       	subi	r16, 0xFF	; 255
 6f4:	1f 4f       	sbci	r17, 0xFF	; 255
 6f6:	22 96       	adiw	r28, 0x02	; 2
 6f8:	04 30       	cpi	r16, 0x04	; 4
 6fa:	11 05       	cpc	r17, r1
 6fc:	89 f6       	brne	.-94     	; 0x6a0 <MakeDoorStates+0x1c>
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	df 90       	pop	r13
 70c:	08 95       	ret

0000070e <ProcessMessage>:
 70e:	db 01       	movw	r26, r22
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	b1 f5       	brne	.+108    	; 0x780 <ProcessMessage+0x72>
 714:	8c 91       	ld	r24, X
 716:	98 2f       	mov	r25, r24
 718:	90 72       	andi	r25, 0x20	; 32
 71a:	28 2f       	mov	r18, r24
 71c:	20 76       	andi	r18, 0x60	; 96
 71e:	d9 f1       	breq	.+118    	; 0x796 <ProcessMessage+0x88>
 720:	21 e0       	ldi	r18, 0x01	; 1
 722:	38 2f       	mov	r19, r24
 724:	30 71       	andi	r19, 0x10	; 16
 726:	84 ff       	sbrs	r24, 4
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	99 23       	and	r25, r25
 72c:	11 f0       	breq	.+4      	; 0x732 <ProcessMessage+0x24>
 72e:	94 e0       	ldi	r25, 0x04	; 4
 730:	01 c0       	rjmp	.+2      	; 0x734 <ProcessMessage+0x26>
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	8f 70       	andi	r24, 0x0F	; 15
 736:	89 0f       	add	r24, r25
 738:	41 e0       	ldi	r20, 0x01	; 1
 73a:	50 e0       	ldi	r21, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <ProcessMessage+0x34>
 73e:	44 0f       	add	r20, r20
 740:	55 1f       	adc	r21, r21
 742:	8a 95       	dec	r24
 744:	e2 f7       	brpl	.-8      	; 0x73e <ProcessMessage+0x30>
 746:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 74a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 74e:	ba 01       	movw	r22, r20
 750:	60 95       	com	r22
 752:	70 95       	com	r23
 754:	86 23       	and	r24, r22
 756:	97 23       	and	r25, r23
 758:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 75c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 760:	33 23       	and	r19, r19
 762:	51 f0       	breq	.+20     	; 0x778 <ProcessMessage+0x6a>
 764:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 768:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 76c:	84 2b       	or	r24, r20
 76e:	95 2b       	or	r25, r21
 770:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 774:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 778:	67 ec       	ldi	r22, 0xC7	; 199
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	0c 94 07 03 	jmp	0x60e	; 0x60e <SendEvent>
 780:	83 30       	cpi	r24, 0x03	; 3
 782:	49 f4       	brne	.+18     	; 0x796 <ProcessMessage+0x88>
 784:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <_testHandler>
 788:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <_testHandler+0x1>
 78c:	30 97       	sbiw	r30, 0x00	; 0
 78e:	19 f0       	breq	.+6      	; 0x796 <ProcessMessage+0x88>
 790:	64 2f       	mov	r22, r20
 792:	cd 01       	movw	r24, r26
 794:	09 94       	ijmp
 796:	08 95       	ret

00000798 <HandleMessage>:
 798:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <msgType.1871>
 79c:	91 11       	cpse	r25, r1
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <HandleMessage+0x12>
 7a0:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <msgType.1871>
 7a4:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <msgLen.1872>
 7a8:	08 95       	ret
 7aa:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <msgLen.1872>
 7ae:	41 11       	cpse	r20, r1
 7b0:	04 c0       	rjmp	.+8      	; 0x7ba <HandleMessage+0x22>
 7b2:	82 50       	subi	r24, 0x02	; 2
 7b4:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <msgLen.1872>
 7b8:	15 c0       	rjmp	.+42     	; 0x7e4 <HandleMessage+0x4c>
 7ba:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <bufferIndex.1870>
 7be:	e4 17       	cp	r30, r20
 7c0:	98 f4       	brcc	.+38     	; 0x7e8 <HandleMessage+0x50>
 7c2:	21 e0       	ldi	r18, 0x01	; 1
 7c4:	2e 0f       	add	r18, r30
 7c6:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <bufferIndex.1870>
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	e4 56       	subi	r30, 0x64	; 100
 7ce:	ff 4f       	sbci	r31, 0xFF	; 255
 7d0:	80 83       	st	Z, r24
 7d2:	42 13       	cpse	r20, r18
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <HandleMessage+0x50>
 7d6:	6c e9       	ldi	r22, 0x9C	; 156
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	89 2f       	mov	r24, r25
 7dc:	0e 94 87 03 	call	0x70e	; 0x70e <ProcessMessage>
 7e0:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <msgType.1871>
 7e4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <bufferIndex.1870>
 7e8:	08 95       	ret

000007ea <SetInputOutput>:
 7ea:	cf 93       	push	r28
 7ec:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <outputRefreshCounter.1884>
 7f0:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <outputRefreshCounter.1884+0x1>
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <outputRefreshCounter.1884+0x1>
 7fa:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <outputRefreshCounter.1884>
 7fe:	83 70       	andi	r24, 0x03	; 3
 800:	99 27       	eor	r25, r25
 802:	89 2b       	or	r24, r25
 804:	21 f5       	brne	.+72     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 806:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <doorRefreshCounter.1885>
 80a:	8f 5f       	subi	r24, 0xFF	; 255
 80c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <doorRefreshCounter.1885>
 810:	83 70       	andi	r24, 0x03	; 3
 812:	a8 2f       	mov	r26, r24
 814:	b0 e0       	ldi	r27, 0x00	; 0
 816:	aa 0f       	add	r26, r26
 818:	bb 1f       	adc	r27, r27
 81a:	ac 58       	subi	r26, 0x8C	; 140
 81c:	be 4f       	sbci	r27, 0xFE	; 254
 81e:	11 96       	adiw	r26, 0x01	; 1
 820:	ec 91       	ld	r30, X
 822:	11 97       	sbiw	r26, 0x01	; 1
 824:	9c 91       	ld	r25, X
 826:	94 ff       	sbrs	r25, 4
 828:	03 c0       	rjmp	.+6      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82a:	94 e0       	ldi	r25, 0x04	; 4
 82c:	9e 1b       	sub	r25, r30
 82e:	e9 2f       	mov	r30, r25
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	ee 57       	subi	r30, 0x7E	; 126
 834:	ff 4f       	sbci	r31, 0xFF	; 255
 836:	21 e0       	ldi	r18, 0x01	; 1
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	a9 01       	movw	r20, r18
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	44 0f       	add	r20, r20
 840:	55 1f       	adc	r21, r21
 842:	8a 95       	dec	r24
 844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	ca 01       	movw	r24, r20
 848:	90 81       	ld	r25, Z
 84a:	89 2b       	or	r24, r25
 84c:	85 bb       	out	0x15, r24	; 21
 84e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <buttonRefreshCounter.1886>
 852:	8f 5f       	subi	r24, 0xFF	; 255
 854:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <buttonRefreshCounter.1886>
 858:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <displayCache>
 85c:	22 23       	and	r18, r18
 85e:	01 f1       	breq	.+64     	; 0x8a0 <__stack+0x41>
 860:	83 70       	andi	r24, 0x03	; 3
 862:	62 2f       	mov	r22, r18
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	40 e1       	ldi	r20, 0x10	; 16
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	08 2e       	mov	r0, r24
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	44 0f       	add	r20, r20
 870:	55 1f       	adc	r21, r21
 872:	0a 94       	dec	r0
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	46 23       	and	r20, r22
 878:	57 23       	and	r21, r23
 87a:	45 2b       	or	r20, r21
 87c:	11 f0       	breq	.+4      	; 0x882 <__stack+0x23>
 87e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <buttonLiftLed>
 882:	08 2e       	mov	r0, r24
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	75 95       	asr	r23
 888:	67 95       	ror	r22
 88a:	0a 94       	dec	r0
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	60 fd       	sbrc	r22, 0
 890:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <buttonFloorLed>
 894:	82 2f       	mov	r24, r18
 896:	80 7f       	andi	r24, 0xF0	; 240
 898:	19 f0       	breq	.+6      	; 0x8a0 <__stack+0x41>
 89a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <buttonLiftLed_on>
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
 8a0:	91 e0       	ldi	r25, 0x01	; 1
 8a2:	2f 70       	andi	r18, 0x0F	; 15
 8a4:	19 f0       	breq	.+6      	; 0x8ac <__stack+0x4d>
 8a6:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <buttonFloorLed_On>
 8aa:	01 c0       	rjmp	.+2      	; 0x8ae <__stack+0x4f>
 8ac:	21 e0       	ldi	r18, 0x01	; 1
 8ae:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <liftPosDisplay_On>
 8b2:	81 11       	cpse	r24, r1
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <__stack+0x5f>
 8b6:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <Elevator>
 8ba:	3f 73       	andi	r19, 0x3F	; 63
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__stack+0x61>
 8be:	3f e3       	ldi	r19, 0x3F	; 63
 8c0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <liftDisplay7Seg_On>
 8c4:	81 11       	cpse	r24, r1
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <__stack+0x6f>
 8c8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <liftDisplay7Seg>
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__stack+0x71>
 8ce:	87 e0       	ldi	r24, 0x07	; 7
 8d0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <floorDisplayPort>
 8d4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <doorframe>
 8d8:	60 e4       	ldi	r22, 0x40	; 64
 8da:	86 9f       	mul	r24, r22
 8dc:	a0 01       	movw	r20, r0
 8de:	11 24       	eor	r1, r1
 8e0:	60 e8       	ldi	r22, 0x80	; 128
 8e2:	96 9f       	mul	r25, r22
 8e4:	c0 01       	movw	r24, r0
 8e6:	11 24       	eor	r1, r1
 8e8:	84 2b       	or	r24, r20
 8ea:	83 2b       	or	r24, r19
 8ec:	88 bb       	out	0x18, r24	; 24
 8ee:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <buttonLiftLed>
 8f2:	98 e0       	ldi	r25, 0x08	; 8
 8f4:	89 9f       	mul	r24, r25
 8f6:	a0 01       	movw	r20, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <buttonFloorLed>
 8fe:	30 e2       	ldi	r19, 0x20	; 32
 900:	93 9f       	mul	r25, r19
 902:	c0 01       	movw	r24, r0
 904:	11 24       	eor	r1, r1
 906:	84 2b       	or	r24, r20
 908:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <floorDisplayPort>
 90c:	38 2b       	or	r19, r24
 90e:	40 e8       	ldi	r20, 0x80	; 128
 910:	24 9f       	mul	r18, r20
 912:	c0 01       	movw	r24, r0
 914:	11 24       	eor	r1, r1
 916:	83 2b       	or	r24, r19
 918:	8b bb       	out	0x1b, r24	; 27
 91a:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <USART_rxBufferOut>
 91e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 922:	98 17       	cp	r25, r24
 924:	b9 f0       	breq	.+46     	; 0x954 <__stack+0xf5>
 926:	0e 94 2a 02 	call	0x454	; 0x454 <EnterAtomic>
 92a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <USART_rxBufferOut>
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	8e 0f       	add	r24, r30
 932:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	ec 5a       	subi	r30, 0xAC	; 172
 93a:	fe 4f       	sbci	r31, 0xFE	; 254
 93c:	c0 81       	ld	r28, Z
 93e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USART_rxBufferOut>
 942:	8f 71       	andi	r24, 0x1F	; 31
 944:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 948:	0e 94 31 02 	call	0x462	; 0x462 <LeaveAtomic>
 94c:	8c 2f       	mov	r24, r28
 94e:	0e 94 cc 03 	call	0x798	; 0x798 <HandleMessage>
 952:	e3 cf       	rjmp	.-58     	; 0x91a <__stack+0xbb>
 954:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <terminalRefreshCounter.1887>
 958:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <terminalRefreshCounter.1887+0x1>
 95c:	9c 01       	movw	r18, r24
 95e:	2f 5f       	subi	r18, 0xFF	; 255
 960:	3f 4f       	sbci	r19, 0xFF	; 255
 962:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <terminalRefreshCounter.1887+0x1>
 966:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <terminalRefreshCounter.1887>
 96a:	8f 3f       	cpi	r24, 0xFF	; 255
 96c:	9f 40       	sbci	r25, 0x0F	; 15
 96e:	c9 f4       	brne	.+50     	; 0x9a2 <__stack+0x143>
 970:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <EnableStatusUpdate>
 974:	88 23       	and	r24, r24
 976:	a9 f0       	breq	.+42     	; 0x9a2 <__stack+0x143>
 978:	84 e0       	ldi	r24, 0x04	; 4
 97a:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 97e:	86 e0       	ldi	r24, 0x06	; 6
 980:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 984:	85 ea       	ldi	r24, 0xA5	; 165
 986:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 98a:	8a e5       	ldi	r24, 0x5A	; 90
 98c:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 990:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SystemState>
 994:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 998:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <OpenDoors>
 99c:	cf 91       	pop	r28
 99e:	0c 94 03 03 	jmp	0x606	; 0x606 <Usart_PutChar>
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

000009a6 <InitializeStart>:
 9a6:	8a ec       	ldi	r24, 0xCA	; 202
 9a8:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 9ac:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <liftPosDisplay_On>
 9b0:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <buttonLiftLed_on>
 9b4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <liftDisplay7Seg_On>
 9b8:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <buttonFloorLed_On>
 9bc:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <doorframe>
 9c0:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <liftDoorState+0x1>
 9c4:	80 e2       	ldi	r24, 0x20	; 32
 9c6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <liftDoorState>
 9ca:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <liftDoorState+0x3>
 9ce:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <liftDoorState+0x2>
 9d2:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <liftDoorState+0x5>
 9d6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <liftDoorState+0x4>
 9da:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <liftDoorState+0x7>
 9de:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <liftDoorState+0x6>
 9e2:	8f e1       	ldi	r24, 0x1F	; 31
 9e4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 9e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 9ec:	0e 94 9a 02 	call	0x534	; 0x534 <InitializeCounter>
 9f0:	20 e0       	ldi	r18, 0x00	; 0
 9f2:	40 e0       	ldi	r20, 0x00	; 0
 9f4:	61 ec       	ldi	r22, 0xC1	; 193
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
 9fc:	8e ef       	ldi	r24, 0xFE	; 254
 9fe:	0e 94 03 03 	call	0x606	; 0x606 <Usart_PutChar>
 a02:	0e 94 5f 02 	call	0x4be	; 0x4be <DispatchEvent>
 a06:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SetInputOutput>
 a0a:	fb cf       	rjmp	.-10     	; 0xa02 <InitializeStart+0x5c>

00000a0c <__vector_1>:
 a0c:	1f 92       	push	r1
 a0e:	0f 92       	push	r0
 a10:	0f b6       	in	r0, 0x3f	; 63
 a12:	0f 92       	push	r0
 a14:	11 24       	eor	r1, r1
 a16:	2f 93       	push	r18
 a18:	3f 93       	push	r19
 a1a:	4f 93       	push	r20
 a1c:	5f 93       	push	r21
 a1e:	6f 93       	push	r22
 a20:	7f 93       	push	r23
 a22:	8f 93       	push	r24
 a24:	9f 93       	push	r25
 a26:	af 93       	push	r26
 a28:	bf 93       	push	r27
 a2a:	ef 93       	push	r30
 a2c:	ff 93       	push	r31
 a2e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 a32:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 a36:	91 60       	ori	r25, 0x01	; 1
 a38:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 a3c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 a40:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <ButtonState>
 a44:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <ButtonState+0x1>
 a48:	20 e0       	ldi	r18, 0x00	; 0
 a4a:	69 ec       	ldi	r22, 0xC9	; 201
 a4c:	80 e1       	ldi	r24, 0x10	; 16
 a4e:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
 a52:	ff 91       	pop	r31
 a54:	ef 91       	pop	r30
 a56:	bf 91       	pop	r27
 a58:	af 91       	pop	r26
 a5a:	9f 91       	pop	r25
 a5c:	8f 91       	pop	r24
 a5e:	7f 91       	pop	r23
 a60:	6f 91       	pop	r22
 a62:	5f 91       	pop	r21
 a64:	4f 91       	pop	r20
 a66:	3f 91       	pop	r19
 a68:	2f 91       	pop	r18
 a6a:	0f 90       	pop	r0
 a6c:	0f be       	out	0x3f, r0	; 63
 a6e:	0f 90       	pop	r0
 a70:	1f 90       	pop	r1
 a72:	18 95       	reti

00000a74 <__vector_13>:
 a74:	1f 92       	push	r1
 a76:	0f 92       	push	r0
 a78:	0f b6       	in	r0, 0x3f	; 63
 a7a:	0f 92       	push	r0
 a7c:	11 24       	eor	r1, r1
 a7e:	2f 93       	push	r18
 a80:	3f 93       	push	r19
 a82:	8f 93       	push	r24
 a84:	9f 93       	push	r25
 a86:	ef 93       	push	r30
 a88:	ff 93       	push	r31
 a8a:	5f 9b       	sbis	0x0b, 7	; 11
 a8c:	1e c0       	rjmp	.+60     	; 0xaca <__vector_13+0x56>
 a8e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 a92:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <USART_rxBufferOut>
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	01 96       	adiw	r24, 0x01	; 1
 a9a:	8f 71       	andi	r24, 0x1F	; 31
 a9c:	99 27       	eor	r25, r25
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	82 17       	cp	r24, r18
 aa2:	93 07       	cpc	r25, r19
 aa4:	89 f0       	breq	.+34     	; 0xac8 <__vector_13+0x54>
 aa6:	8c b1       	in	r24, 0x0c	; 12
 aa8:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <USART_rxBufferIn>
 aac:	91 e0       	ldi	r25, 0x01	; 1
 aae:	9e 0f       	add	r25, r30
 ab0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <USART_rxBufferIn>
 ab4:	f0 e0       	ldi	r31, 0x00	; 0
 ab6:	ec 5a       	subi	r30, 0xAC	; 172
 ab8:	fe 4f       	sbci	r31, 0xFE	; 254
 aba:	80 83       	st	Z, r24
 abc:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 ac0:	8f 71       	andi	r24, 0x1F	; 31
 ac2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USART_rxBufferIn>
 ac6:	e1 cf       	rjmp	.-62     	; 0xa8a <__vector_13+0x16>
 ac8:	57 98       	cbi	0x0a, 7	; 10
 aca:	ff 91       	pop	r31
 acc:	ef 91       	pop	r30
 ace:	9f 91       	pop	r25
 ad0:	8f 91       	pop	r24
 ad2:	3f 91       	pop	r19
 ad4:	2f 91       	pop	r18
 ad6:	0f 90       	pop	r0
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	0f 90       	pop	r0
 adc:	1f 90       	pop	r1
 ade:	18 95       	reti

00000ae0 <__vector_7>:
 ae0:	1f 92       	push	r1
 ae2:	0f 92       	push	r0
 ae4:	0f b6       	in	r0, 0x3f	; 63
 ae6:	0f 92       	push	r0
 ae8:	11 24       	eor	r1, r1
 aea:	2f 93       	push	r18
 aec:	3f 93       	push	r19
 aee:	4f 93       	push	r20
 af0:	5f 93       	push	r21
 af2:	6f 93       	push	r22
 af4:	7f 93       	push	r23
 af6:	8f 93       	push	r24
 af8:	9f 93       	push	r25
 afa:	af 93       	push	r26
 afc:	bf 93       	push	r27
 afe:	ef 93       	push	r30
 b00:	ff 93       	push	r31
 b02:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ElevatorTick.1962>
 b06:	8f 5f       	subi	r24, 0xFF	; 255
 b08:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <ElevatorTick.1962>
 b0c:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
 b10:	9f 5f       	subi	r25, 0xFF	; 255
 b12:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <__data_end>
 b16:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <Elevator+0x2>
 b1a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__udivmodqi4>
 b1e:	91 11       	cpse	r25, r1
 b20:	14 c0       	rjmp	.+40     	; 0xb4a <__vector_7+0x6a>
 b22:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 b26:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <Elevator+0x1>
 b2a:	96 17       	cp	r25, r22
 b2c:	61 f0       	breq	.+24     	; 0xb46 <__vector_7+0x66>
 b2e:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Elevator+0x4>
 b32:	89 0f       	add	r24, r25
 b34:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 b38:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Elevator+0x5>
 b3c:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Elevator+0x6>
 b40:	30 97       	sbiw	r30, 0x00	; 0
 b42:	09 f0       	breq	.+2      	; 0xb46 <__vector_7+0x66>
 b44:	09 95       	icall
 b46:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <ElevatorTick.1962>
 b4a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 b4e:	6c e0       	ldi	r22, 0x0C	; 12
 b50:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__udivmodqi4>
 b54:	91 11       	cpse	r25, r1
 b56:	04 c0       	rjmp	.+8      	; 0xb60 <__vector_7+0x80>
 b58:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
 b5c:	0e 94 42 03 	call	0x684	; 0x684 <MakeDoorStates>
 b60:	ff 91       	pop	r31
 b62:	ef 91       	pop	r30
 b64:	bf 91       	pop	r27
 b66:	af 91       	pop	r26
 b68:	9f 91       	pop	r25
 b6a:	8f 91       	pop	r24
 b6c:	7f 91       	pop	r23
 b6e:	6f 91       	pop	r22
 b70:	5f 91       	pop	r21
 b72:	4f 91       	pop	r20
 b74:	3f 91       	pop	r19
 b76:	2f 91       	pop	r18
 b78:	0f 90       	pop	r0
 b7a:	0f be       	out	0x3f, r0	; 63
 b7c:	0f 90       	pop	r0
 b7e:	1f 90       	pop	r1
 b80:	18 95       	reti

00000b82 <StartTimer>:
 b82:	ff 92       	push	r15
 b84:	0f 93       	push	r16
 b86:	1f 93       	push	r17
 b88:	cf 93       	push	r28
 b8a:	df 93       	push	r29
 b8c:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 b90:	2f 2d       	mov	r18, r15
 b92:	30 e0       	ldi	r19, 0x00	; 0
 b94:	c0 e0       	ldi	r28, 0x00	; 0
 b96:	d0 e0       	ldi	r29, 0x00	; 0
 b98:	a9 01       	movw	r20, r18
 b9a:	0c 2e       	mov	r0, r28
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <StartTimer+0x20>
 b9e:	55 95       	asr	r21
 ba0:	47 95       	ror	r20
 ba2:	0a 94       	dec	r0
 ba4:	e2 f7       	brpl	.-8      	; 0xb9e <StartTimer+0x1c>
 ba6:	40 fd       	sbrc	r20, 0
 ba8:	18 c0       	rjmp	.+48     	; 0xbda <StartTimer+0x58>
 baa:	8c 01       	movw	r16, r24
 bac:	0e 94 2a 02 	call	0x454	; 0x454 <EnterAtomic>
 bb0:	21 e0       	ldi	r18, 0x01	; 1
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	0c 2e       	mov	r0, r28
 bb6:	01 c0       	rjmp	.+2      	; 0xbba <StartTimer+0x38>
 bb8:	22 0f       	add	r18, r18
 bba:	0a 94       	dec	r0
 bbc:	ea f7       	brpl	.-6      	; 0xbb8 <StartTimer+0x36>
 bbe:	2f 29       	or	r18, r15
 bc0:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <UsedTimers>
 bc4:	fe 01       	movw	r30, r28
 bc6:	ee 0f       	add	r30, r30
 bc8:	ff 1f       	adc	r31, r31
 bca:	ef 5b       	subi	r30, 0xBF	; 191
 bcc:	fe 4f       	sbci	r31, 0xFE	; 254
 bce:	11 83       	std	Z+1, r17	; 0x01
 bd0:	00 83       	st	Z, r16
 bd2:	0e 94 31 02 	call	0x462	; 0x462 <LeaveAtomic>
 bd6:	8c 2f       	mov	r24, r28
 bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <StartTimer+0x62>
 bda:	21 96       	adiw	r28, 0x01	; 1
 bdc:	c8 30       	cpi	r28, 0x08	; 8
 bde:	d1 05       	cpc	r29, r1
 be0:	d9 f6       	brne	.-74     	; 0xb98 <StartTimer+0x16>
 be2:	8f ef       	ldi	r24, 0xFF	; 255
 be4:	df 91       	pop	r29
 be6:	cf 91       	pop	r28
 be8:	1f 91       	pop	r17
 bea:	0f 91       	pop	r16
 bec:	ff 90       	pop	r15
 bee:	08 95       	ret

00000bf0 <__vector_10>:
 bf0:	1f 92       	push	r1
 bf2:	0f 92       	push	r0
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	0f 92       	push	r0
 bf8:	11 24       	eor	r1, r1
 bfa:	cf 92       	push	r12
 bfc:	df 92       	push	r13
 bfe:	ff 92       	push	r15
 c00:	0f 93       	push	r16
 c02:	1f 93       	push	r17
 c04:	2f 93       	push	r18
 c06:	3f 93       	push	r19
 c08:	4f 93       	push	r20
 c0a:	5f 93       	push	r21
 c0c:	6f 93       	push	r22
 c0e:	7f 93       	push	r23
 c10:	8f 93       	push	r24
 c12:	9f 93       	push	r25
 c14:	af 93       	push	r26
 c16:	bf 93       	push	r27
 c18:	cf 93       	push	r28
 c1a:	df 93       	push	r29
 c1c:	ef 93       	push	r30
 c1e:	ff 93       	push	r31
 c20:	01 e4       	ldi	r16, 0x41	; 65
 c22:	11 e0       	ldi	r17, 0x01	; 1
 c24:	c0 e0       	ldi	r28, 0x00	; 0
 c26:	d0 e0       	ldi	r29, 0x00	; 0
 c28:	cc 24       	eor	r12, r12
 c2a:	c3 94       	inc	r12
 c2c:	d1 2c       	mov	r13, r1
 c2e:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 c32:	8f 2d       	mov	r24, r15
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0c 2e       	mov	r0, r28
 c38:	02 c0       	rjmp	.+4      	; 0xc3e <__vector_10+0x4e>
 c3a:	95 95       	asr	r25
 c3c:	87 95       	ror	r24
 c3e:	0a 94       	dec	r0
 c40:	e2 f7       	brpl	.-8      	; 0xc3a <__vector_10+0x4a>
 c42:	80 ff       	sbrs	r24, 0
 c44:	18 c0       	rjmp	.+48     	; 0xc76 <__vector_10+0x86>
 c46:	f8 01       	movw	r30, r16
 c48:	80 81       	ld	r24, Z
 c4a:	91 81       	ldd	r25, Z+1	; 0x01
 c4c:	01 97       	sbiw	r24, 0x01	; 1
 c4e:	91 83       	std	Z+1, r25	; 0x01
 c50:	80 83       	st	Z, r24
 c52:	89 2b       	or	r24, r25
 c54:	81 f4       	brne	.+32     	; 0xc76 <__vector_10+0x86>
 c56:	20 e0       	ldi	r18, 0x00	; 0
 c58:	40 e0       	ldi	r20, 0x00	; 0
 c5a:	68 ec       	ldi	r22, 0xC8	; 200
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	0e 94 07 03 	call	0x60e	; 0x60e <SendEvent>
 c62:	c6 01       	movw	r24, r12
 c64:	0c 2e       	mov	r0, r28
 c66:	01 c0       	rjmp	.+2      	; 0xc6a <__vector_10+0x7a>
 c68:	88 0f       	add	r24, r24
 c6a:	0a 94       	dec	r0
 c6c:	ea f7       	brpl	.-6      	; 0xc68 <__vector_10+0x78>
 c6e:	80 95       	com	r24
 c70:	f8 22       	and	r15, r24
 c72:	f0 92 51 01 	sts	0x0151, r15	; 0x800151 <UsedTimers>
 c76:	21 96       	adiw	r28, 0x01	; 1
 c78:	0e 5f       	subi	r16, 0xFE	; 254
 c7a:	1f 4f       	sbci	r17, 0xFF	; 255
 c7c:	c8 30       	cpi	r28, 0x08	; 8
 c7e:	d1 05       	cpc	r29, r1
 c80:	b1 f6       	brne	.-84     	; 0xc2e <__vector_10+0x3e>
 c82:	ff 91       	pop	r31
 c84:	ef 91       	pop	r30
 c86:	df 91       	pop	r29
 c88:	cf 91       	pop	r28
 c8a:	bf 91       	pop	r27
 c8c:	af 91       	pop	r26
 c8e:	9f 91       	pop	r25
 c90:	8f 91       	pop	r24
 c92:	7f 91       	pop	r23
 c94:	6f 91       	pop	r22
 c96:	5f 91       	pop	r21
 c98:	4f 91       	pop	r20
 c9a:	3f 91       	pop	r19
 c9c:	2f 91       	pop	r18
 c9e:	1f 91       	pop	r17
 ca0:	0f 91       	pop	r16
 ca2:	ff 90       	pop	r15
 ca4:	df 90       	pop	r13
 ca6:	cf 90       	pop	r12
 ca8:	0f 90       	pop	r0
 caa:	0f be       	out	0x3f, r0	; 63
 cac:	0f 90       	pop	r0
 cae:	1f 90       	pop	r1
 cb0:	18 95       	reti

00000cb2 <__udivmodqi4>:
 cb2:	99 1b       	sub	r25, r25
 cb4:	79 e0       	ldi	r23, 0x09	; 9
 cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <__udivmodqi4_ep>

00000cb8 <__udivmodqi4_loop>:
 cb8:	99 1f       	adc	r25, r25
 cba:	96 17       	cp	r25, r22
 cbc:	08 f0       	brcs	.+2      	; 0xcc0 <__udivmodqi4_ep>
 cbe:	96 1b       	sub	r25, r22

00000cc0 <__udivmodqi4_ep>:
 cc0:	88 1f       	adc	r24, r24
 cc2:	7a 95       	dec	r23
 cc4:	c9 f7       	brne	.-14     	; 0xcb8 <__udivmodqi4_loop>
 cc6:	80 95       	com	r24
 cc8:	08 95       	ret

00000cca <_exit>:
 cca:	f8 94       	cli

00000ccc <__stop_program>:
 ccc:	ff cf       	rjmp	.-2      	; 0xccc <__stop_program>
