
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800086  00800086  00000a42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000203f  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca2  00000000  00000000  00002c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dab  00000000  00000000  00003939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  000046e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f11  00000000  00000000  00004ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001149  00000000  00000000  00005ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



int main(void)
{
    InitializePorts();
  92:	0e 94 89 01 	call	0x312	; 0x312 <InitializePorts>
	Usart_Init();
  96:	0e 94 80 01 	call	0x300	; 0x300 <Usart_Init>
	RegisterTestHandler( TestFunction );
  9a:	81 ec       	ldi	r24, 0xC1	; 193
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  aa:	0e 94 67 03 	call	0x6ce	; 0x6ce <InitializeStart>
}
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret

000000b4 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	d8 2f       	mov	r29, r24
  bc:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/POS_STEPS_PER_FLOOR;
  be:	c8 2f       	mov	r28, r24
  c0:	c2 95       	swap	r28
  c2:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
  c4:	8c 2f       	mov	r24, r28
  c6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
  ca:	8d 2f       	mov	r24, r29
  cc:	6c 2f       	mov	r22, r28
  ce:	0e 94 b6 04 	call	0x96c	; 0x96c <__udivmodqi4>
  d2:	91 11       	cpse	r25, r1
  d4:	08 c0       	rjmp	.+16     	; 0xe6 <NotifyCalibrationDone+0x32>
  d6:	c1 11       	cpse	r28, r1
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
  da:	21 2f       	mov	r18, r17
  dc:	4d 2f       	mov	r20, r29
  de:	62 ec       	ldi	r22, 0xC2	; 194
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 9b 01 	call	0x336	; 0x336 <SendEvent>
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	08 95       	ret

000000ee <OnElevatorPositionChanged>:
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
  ee:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
  f0:	48 2f       	mov	r20, r24
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 9b 01 	call	0x336	; 0x336 <SendEvent>
  fa:	08 95       	ret

000000fc <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
  fc:	fc 01       	movw	r30, r24
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	81 3c       	cpi	r24, 0xC1	; 193
 102:	29 f4       	brne	.+10     	; 0x10e <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 104:	8a e5       	ldi	r24, 0x5A	; 90
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 74 01 	call	0x2e8	; 0x2e8 <CalibrateElevatorPosition>
		return;
 10c:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 10e:	82 3c       	cpi	r24, 0xC2	; 194
 110:	49 f4       	brne	.+18     	; 0x124 <MotorCtrl_Initializing+0x28>
	{
		SetDisplay(Floor0);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SetDisplay>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 118:	66 ea       	ldi	r22, 0xA6	; 166
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	80 e6       	ldi	r24, 0x60	; 96
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <SetState>
 124:	08 95       	ret

00000126 <MotorCtrl_Moving>:
}


void MotorCtrl_Moving(Message* msg)
{
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 126:	fc 01       	movw	r30, r24
 128:	21 81       	ldd	r18, Z+1	; 0x01
 12a:	22 30       	cpi	r18, 0x02	; 2
 12c:	71 f4       	brne	.+28     	; 0x14a <MotorCtrl_Moving+0x24>
 12e:	22 81       	ldd	r18, Z+2	; 0x02
 130:	83 81       	ldd	r24, Z+3	; 0x03
 132:	28 13       	cpse	r18, r24
 134:	0a c0       	rjmp	.+20     	; 0x14a <MotorCtrl_Moving+0x24>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow/POS_STEPS_PER_FLOOR;
 136:	22 95       	swap	r18
 138:	2f 70       	andi	r18, 0x0F	; 15
 13a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_start+0x6>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 13e:	66 ea       	ldi	r22, 0xA6	; 166
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e6       	ldi	r24, 0x60	; 96
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <SetState>
 14a:	08 95       	ret

0000014c <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 150:	fc 01       	movw	r30, r24
 152:	21 81       	ldd	r18, Z+1	; 0x01
 154:	21 30       	cpi	r18, 0x01	; 1
 156:	91 f4       	brne	.+36     	; 0x17c <MotorCtrl_Stopped+0x30>
 158:	82 81       	ldd	r24, Z+2	; 0x02
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	78 f4       	brcc	.+30     	; 0x17c <MotorCtrl_Stopped+0x30>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 15e:	c0 e6       	ldi	r28, 0x60	; 96
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	8e 83       	std	Y+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 164:	63 e9       	ldi	r22, 0x93	; 147
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <SetState>
		MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 16e:	8e 81       	ldd	r24, Y+6	; 0x06
 170:	67 e7       	ldi	r22, 0x77	; 119
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	82 95       	swap	r24
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	0e 94 60 01 	call	0x2c0	; 0x2c0 <MoveElevator>
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <TestFunction>:
{
	
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
 188:	90 81       	ld	r25, Z
 18a:	91 30       	cpi	r25, 0x01	; 1
 18c:	49 f4       	brne	.+18     	; 0x1a0 <TestFunction+0x1e>
 18e:	c9 e7       	ldi	r28, 0x79	; 121
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
 194:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
 198:	89 91       	ld	r24, Y+
 19a:	81 11       	cpse	r24, r1
 19c:	fb cf       	rjmp	.-10     	; 0x194 <TestFunction+0x12>
 19e:	08 c0       	rjmp	.+16     	; 0x1b0 <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
 1a0:	92 30       	cpi	r25, 0x02	; 2
 1a2:	31 f4       	brne	.+12     	; 0x1b0 <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	41 81       	ldd	r20, Z+1	; 0x01
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	0e 94 9b 01 	call	0x336	; 0x336 <SendEvent>
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <EnterAtomic>:
		EnterAtomic();
		UsedTimers &= ~(1<<id);
		WaitingTimer[id] = 0;
		LeaveAtomic();
	}
}
 1b6:	f8 94       	cli
 1b8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 1c2:	08 95       	ret

000001c4 <LeaveAtomic>:
 1c4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <enterAtomicNesting>
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <enterAtomicNesting>
 1ce:	81 11       	cpse	r24, r1
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <LeaveAtomic+0x10>
 1d2:	78 94       	sei
 1d4:	08 95       	ret

000001d6 <SetState>:
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
 1e0:	8b 01       	movw	r16, r22
 1e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <EnterAtomic>
 1e6:	1c 83       	std	Y+4, r17	; 0x04
 1e8:	0b 83       	std	Y+3, r16	; 0x03
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <LeaveAtomic>

000001f6 <RegisterFsm>:
 1f6:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <anchor>
 1fa:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <anchor+0x1>
 1fe:	a7 e6       	ldi	r26, 0x67	; 103
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	e7 36       	cpi	r30, 0x67	; 103
 206:	f2 07       	cpc	r31, r18
 208:	29 f0       	breq	.+10     	; 0x214 <RegisterFsm+0x1e>
 20a:	df 01       	movw	r26, r30
 20c:	01 90       	ld	r0, Z+
 20e:	f0 81       	ld	r31, Z
 210:	e0 2d       	mov	r30, r0
 212:	f7 cf       	rjmp	.-18     	; 0x202 <RegisterFsm+0xc>
 214:	8d 93       	st	X+, r24
 216:	9c 93       	st	X, r25
 218:	dc 01       	movw	r26, r24
 21a:	ed 93       	st	X+, r30
 21c:	fc 93       	st	X, r31
 21e:	08 95       	ret

00000220 <DispatchEvent>:
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	0e 94 db 00 	call	0x1b6	; 0x1b6 <EnterAtomic>
 22c:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <msgQ_out>
 230:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 234:	98 17       	cp	r25, r24
 236:	59 f0       	breq	.+22     	; 0x24e <DispatchEvent+0x2e>
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	98 9f       	mul	r25, r24
 23c:	e0 01       	movw	r28, r0
 23e:	11 24       	eor	r1, r1
 240:	cf 55       	subi	r28, 0x5F	; 95
 242:	df 4f       	sbci	r29, 0xFF	; 255
 244:	9f 5f       	subi	r25, 0xFF	; 255
 246:	9f 71       	andi	r25, 0x1F	; 31
 248:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <msgQ_out>
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DispatchEvent+0x32>
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	d0 e0       	ldi	r29, 0x00	; 0
 252:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LeaveAtomic>
 256:	20 97       	sbiw	r28, 0x00	; 0
 258:	c9 f0       	breq	.+50     	; 0x28c <DispatchEvent+0x6c>
 25a:	00 91 67 00 	lds	r16, 0x0067	; 0x800067 <anchor>
 25e:	10 91 68 00 	lds	r17, 0x0068	; 0x800068 <anchor+0x1>
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	07 36       	cpi	r16, 0x67	; 103
 266:	1f 07       	cpc	r17, r31
 268:	89 f0       	breq	.+34     	; 0x28c <DispatchEvent+0x6c>
 26a:	d8 01       	movw	r26, r16
 26c:	12 96       	adiw	r26, 0x02	; 2
 26e:	9c 91       	ld	r25, X
 270:	12 97       	sbiw	r26, 0x02	; 2
 272:	88 81       	ld	r24, Y
 274:	89 23       	and	r24, r25
 276:	31 f0       	breq	.+12     	; 0x284 <DispatchEvent+0x64>
 278:	13 96       	adiw	r26, 0x03	; 3
 27a:	ed 91       	ld	r30, X+
 27c:	fc 91       	ld	r31, X
 27e:	14 97       	sbiw	r26, 0x04	; 4
 280:	ce 01       	movw	r24, r28
 282:	09 95       	icall
 284:	f8 01       	movw	r30, r16
 286:	00 81       	ld	r16, Z
 288:	11 81       	ldd	r17, Z+1	; 0x01
 28a:	eb cf       	rjmp	.-42     	; 0x262 <DispatchEvent+0x42>
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <InitializeCounter>:
 296:	12 be       	out	0x32, r1	; 50
 298:	8b e0       	ldi	r24, 0x0B	; 11
 29a:	83 bf       	out	0x33, r24	; 51
 29c:	8d e7       	ldi	r24, 0x7D	; 125
 29e:	8c bf       	out	0x3c, r24	; 60
 2a0:	89 b7       	in	r24, 0x39	; 57
 2a2:	82 60       	ori	r24, 0x02	; 2
 2a4:	89 bf       	out	0x39, r24	; 57
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	9b bd       	out	0x2b, r25	; 43
 2ac:	8a bd       	out	0x2a, r24	; 42
 2ae:	1d bc       	out	0x2d, r1	; 45
 2b0:	1c bc       	out	0x2c, r1	; 44
 2b2:	1f bc       	out	0x2f, r1	; 47
 2b4:	8d e0       	ldi	r24, 0x0D	; 13
 2b6:	8e bd       	out	0x2e, r24	; 46
 2b8:	89 b7       	in	r24, 0x39	; 57
 2ba:	80 61       	ori	r24, 0x10	; 16
 2bc:	89 bf       	out	0x39, r24	; 57
 2be:	08 95       	ret

000002c0 <MoveElevator>:
 2c0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 2c4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Elevator+0x4>
 2c8:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <Elevator+0x6>
 2cc:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <Elevator+0x5>
 2d0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 2d4:	98 17       	cp	r25, r24
 2d6:	10 f4       	brcc	.+4      	; 0x2dc <MoveElevator+0x1c>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <MoveElevator+0x22>
 2dc:	89 17       	cp	r24, r25
 2de:	18 f4       	brcc	.+6      	; 0x2e6 <MoveElevator+0x26>
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Elevator+0x4>
 2e6:	08 95       	ret

000002e8 <CalibrateElevatorPosition>:
 2e8:	bc 01       	movw	r22, r24
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <MoveElevator>

000002f0 <SetDisplay>:
 2f0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <liftDisplay7Seg>
 2f4:	08 95       	ret

000002f6 <RegisterTestHandler>:
 2f6:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_testHandler+0x1>
 2fa:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_testHandler>
 2fe:	08 95       	ret

00000300 <Usart_Init>:
 300:	10 bc       	out	0x20, r1	; 32
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	89 b9       	out	0x09, r24	; 9
 306:	86 e8       	ldi	r24, 0x86	; 134
 308:	80 bd       	out	0x20, r24	; 32
 30a:	88 e9       	ldi	r24, 0x98	; 152
 30c:	8a b9       	out	0x0a, r24	; 10
 30e:	78 94       	sei
 310:	08 95       	ret

00000312 <InitializePorts>:
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	87 bb       	out	0x17, r24	; 23
 316:	84 bb       	out	0x14, r24	; 20
 318:	8a bb       	out	0x1a, r24	; 26
 31a:	11 ba       	out	0x11, r1	; 17
 31c:	0e 94 80 01 	call	0x300	; 0x300 <Usart_Init>
 320:	85 b7       	in	r24, 0x35	; 53
 322:	83 60       	ori	r24, 0x03	; 3
 324:	85 bf       	out	0x35, r24	; 53
 326:	8b b7       	in	r24, 0x3b	; 59
 328:	80 64       	ori	r24, 0x40	; 64
 32a:	8b bf       	out	0x3b, r24	; 59
 32c:	08 95       	ret

0000032e <Usart_PutChar>:
 32e:	8c b9       	out	0x0c, r24	; 12
 330:	5d 9b       	sbis	0x0b, 5	; 11
 332:	fe cf       	rjmp	.-4      	; 0x330 <Usart_PutChar+0x2>
 334:	08 95       	ret

00000336 <SendEvent>:
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	c8 2f       	mov	r28, r24
 340:	06 2f       	mov	r16, r22
 342:	d4 2f       	mov	r29, r20
 344:	12 2f       	mov	r17, r18
 346:	0e 94 db 00 	call	0x1b6	; 0x1b6 <EnterAtomic>
 34a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <msgQ_in>
 34e:	e8 2f       	mov	r30, r24
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	af 01       	movw	r20, r30
 354:	4f 5f       	subi	r20, 0xFF	; 255
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	4f 71       	andi	r20, 0x1F	; 31
 35a:	55 27       	eor	r21, r21
 35c:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <msgQ_out>
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	42 17       	cp	r20, r18
 364:	53 07       	cpc	r21, r19
 366:	71 f4       	brne	.+28     	; 0x384 <SendEvent+0x4e>
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 37a:	8e ed       	ldi	r24, 0xDE	; 222
 37c:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 380:	8d ea       	ldi	r24, 0xAD	; 173
 382:	f9 cf       	rjmp	.-14     	; 0x376 <SendEvent+0x40>
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	ef 55       	subi	r30, 0x5F	; 95
 38e:	ff 4f       	sbci	r31, 0xFF	; 255
 390:	01 83       	std	Z+1, r16	; 0x01
 392:	13 83       	std	Z+3, r17	; 0x03
 394:	d2 83       	std	Z+2, r29	; 0x02
 396:	c0 83       	st	Z, r28
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	8f 71       	andi	r24, 0x1F	; 31
 39c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <msgQ_in>
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <LeaveAtomic>

000003ac <MakeDoorStates>:
 3ac:	df 92       	push	r13
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	c6 e6       	ldi	r28, 0x66	; 102
 3bc:	d1 e0       	ldi	r29, 0x01	; 1
 3be:	00 e0       	ldi	r16, 0x00	; 0
 3c0:	10 e0       	ldi	r17, 0x00	; 0
 3c2:	ee 24       	eor	r14, r14
 3c4:	e3 94       	inc	r14
 3c6:	f1 2c       	mov	r15, r1
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	81 11       	cpse	r24, r1
 3cc:	24 c0       	rjmp	.+72     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ce:	48 81       	ld	r20, Y
 3d0:	40 ff       	sbrs	r20, 0
 3d2:	23 c0       	rjmp	.+70     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3d4:	4e 7f       	andi	r20, 0xFE	; 254
 3d6:	48 83       	st	Y, r20
 3d8:	20 2f       	mov	r18, r16
 3da:	65 ec       	ldi	r22, 0xC5	; 197
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	0e 94 9b 01 	call	0x336	; 0x336 <SendEvent>
 3e2:	88 81       	ld	r24, Y
 3e4:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <OpenDoors>
 3e8:	84 ff       	sbrs	r24, 4
 3ea:	0a c0       	rjmp	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ec:	97 01       	movw	r18, r14
 3ee:	00 2e       	mov	r0, r16
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <MakeDoorStates+0x48>
 3f2:	22 0f       	add	r18, r18
 3f4:	0a 94       	dec	r0
 3f6:	ea f7       	brpl	.-6      	; 0x3f2 <MakeDoorStates+0x46>
 3f8:	24 2b       	or	r18, r20
 3fa:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <OpenDoors>
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 400:	c7 01       	movw	r24, r14
 402:	00 2e       	mov	r0, r16
 404:	01 c0       	rjmp	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	88 0f       	add	r24, r24
 408:	0a 94       	dec	r0
 40a:	ea f7       	brpl	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40c:	80 95       	com	r24
 40e:	84 23       	and	r24, r20
 410:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <OpenDoors>
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	81 50       	subi	r24, 0x01	; 1
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	0f 5f       	subi	r16, 0xFF	; 255
 41c:	1f 4f       	sbci	r17, 0xFF	; 255
 41e:	22 96       	adiw	r28, 0x02	; 2
 420:	04 30       	cpi	r16, 0x04	; 4
 422:	11 05       	cpc	r17, r1
 424:	89 f6       	brne	.-94     	; 0x3c8 <MakeDoorStates+0x1c>
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	df 90       	pop	r13
 434:	08 95       	ret

00000436 <ProcessMessage>:
 436:	db 01       	movw	r26, r22
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	b1 f5       	brne	.+108    	; 0x4a8 <ProcessMessage+0x72>
 43c:	8c 91       	ld	r24, X
 43e:	98 2f       	mov	r25, r24
 440:	90 72       	andi	r25, 0x20	; 32
 442:	28 2f       	mov	r18, r24
 444:	20 76       	andi	r18, 0x60	; 96
 446:	d9 f1       	breq	.+118    	; 0x4be <ProcessMessage+0x88>
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	38 2f       	mov	r19, r24
 44c:	30 71       	andi	r19, 0x10	; 16
 44e:	84 ff       	sbrs	r24, 4
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	99 23       	and	r25, r25
 454:	11 f0       	breq	.+4      	; 0x45a <ProcessMessage+0x24>
 456:	94 e0       	ldi	r25, 0x04	; 4
 458:	01 c0       	rjmp	.+2      	; 0x45c <ProcessMessage+0x26>
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	8f 70       	andi	r24, 0x0F	; 15
 45e:	89 0f       	add	r24, r25
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <ProcessMessage+0x34>
 466:	44 0f       	add	r20, r20
 468:	55 1f       	adc	r21, r21
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <ProcessMessage+0x30>
 46e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 472:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 476:	ba 01       	movw	r22, r20
 478:	60 95       	com	r22
 47a:	70 95       	com	r23
 47c:	86 23       	and	r24, r22
 47e:	97 23       	and	r25, r23
 480:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 484:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 488:	33 23       	and	r19, r19
 48a:	51 f0       	breq	.+20     	; 0x4a0 <ProcessMessage+0x6a>
 48c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 490:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 494:	84 2b       	or	r24, r20
 496:	95 2b       	or	r25, r21
 498:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 49c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 4a0:	67 ec       	ldi	r22, 0xC7	; 199
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0c 94 9b 01 	jmp	0x336	; 0x336 <SendEvent>
 4a8:	83 30       	cpi	r24, 0x03	; 3
 4aa:	49 f4       	brne	.+18     	; 0x4be <ProcessMessage+0x88>
 4ac:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <_testHandler>
 4b0:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <_testHandler+0x1>
 4b4:	30 97       	sbiw	r30, 0x00	; 0
 4b6:	19 f0       	breq	.+6      	; 0x4be <ProcessMessage+0x88>
 4b8:	64 2f       	mov	r22, r20
 4ba:	cd 01       	movw	r24, r26
 4bc:	09 94       	ijmp
 4be:	08 95       	ret

000004c0 <HandleMessage>:
 4c0:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <msgType.1871>
 4c4:	91 11       	cpse	r25, r1
 4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <HandleMessage+0x12>
 4c8:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <msgType.1871>
 4cc:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <msgLen.1872>
 4d0:	08 95       	ret
 4d2:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <msgLen.1872>
 4d6:	41 11       	cpse	r20, r1
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <HandleMessage+0x22>
 4da:	82 50       	subi	r24, 0x02	; 2
 4dc:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <msgLen.1872>
 4e0:	15 c0       	rjmp	.+42     	; 0x50c <HandleMessage+0x4c>
 4e2:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <bufferIndex.1870>
 4e6:	e4 17       	cp	r30, r20
 4e8:	98 f4       	brcc	.+38     	; 0x510 <HandleMessage+0x50>
 4ea:	21 e0       	ldi	r18, 0x01	; 1
 4ec:	2e 0f       	add	r18, r30
 4ee:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <bufferIndex.1870>
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	e2 57       	subi	r30, 0x72	; 114
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	80 83       	st	Z, r24
 4fa:	42 13       	cpse	r20, r18
 4fc:	09 c0       	rjmp	.+18     	; 0x510 <HandleMessage+0x50>
 4fe:	6e e8       	ldi	r22, 0x8E	; 142
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	89 2f       	mov	r24, r25
 504:	0e 94 1b 02 	call	0x436	; 0x436 <ProcessMessage>
 508:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <msgType.1871>
 50c:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <bufferIndex.1870>
 510:	08 95       	ret

00000512 <SetInputOutput>:
 512:	cf 93       	push	r28
 514:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <outputRefreshCounter.1884>
 518:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <outputRefreshCounter.1884+0x1>
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <outputRefreshCounter.1884+0x1>
 522:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <outputRefreshCounter.1884>
 526:	83 70       	andi	r24, 0x03	; 3
 528:	99 27       	eor	r25, r25
 52a:	89 2b       	or	r24, r25
 52c:	21 f5       	brne	.+72     	; 0x576 <SetInputOutput+0x64>
 52e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <doorRefreshCounter.1885>
 532:	8f 5f       	subi	r24, 0xFF	; 255
 534:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <doorRefreshCounter.1885>
 538:	83 70       	andi	r24, 0x03	; 3
 53a:	a8 2f       	mov	r26, r24
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	aa 0f       	add	r26, r26
 540:	bb 1f       	adc	r27, r27
 542:	aa 59       	subi	r26, 0x9A	; 154
 544:	be 4f       	sbci	r27, 0xFE	; 254
 546:	11 96       	adiw	r26, 0x01	; 1
 548:	ec 91       	ld	r30, X
 54a:	11 97       	sbiw	r26, 0x01	; 1
 54c:	9c 91       	ld	r25, X
 54e:	94 ff       	sbrs	r25, 4
 550:	03 c0       	rjmp	.+6      	; 0x558 <SetInputOutput+0x46>
 552:	94 e0       	ldi	r25, 0x04	; 4
 554:	9e 1b       	sub	r25, r30
 556:	e9 2f       	mov	r30, r25
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	ed 58       	subi	r30, 0x8D	; 141
 55c:	ff 4f       	sbci	r31, 0xFF	; 255
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	a9 01       	movw	r20, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <SetInputOutput+0x58>
 566:	44 0f       	add	r20, r20
 568:	55 1f       	adc	r21, r21
 56a:	8a 95       	dec	r24
 56c:	e2 f7       	brpl	.-8      	; 0x566 <SetInputOutput+0x54>
 56e:	ca 01       	movw	r24, r20
 570:	90 81       	ld	r25, Z
 572:	89 2b       	or	r24, r25
 574:	85 bb       	out	0x15, r24	; 21
 576:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <buttonRefreshCounter.1886>
 57a:	8f 5f       	subi	r24, 0xFF	; 255
 57c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <buttonRefreshCounter.1886>
 580:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <displayCache>
 584:	22 23       	and	r18, r18
 586:	01 f1       	breq	.+64     	; 0x5c8 <SetInputOutput+0xb6>
 588:	83 70       	andi	r24, 0x03	; 3
 58a:	62 2f       	mov	r22, r18
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	40 e1       	ldi	r20, 0x10	; 16
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	08 2e       	mov	r0, r24
 594:	02 c0       	rjmp	.+4      	; 0x59a <SetInputOutput+0x88>
 596:	44 0f       	add	r20, r20
 598:	55 1f       	adc	r21, r21
 59a:	0a 94       	dec	r0
 59c:	e2 f7       	brpl	.-8      	; 0x596 <SetInputOutput+0x84>
 59e:	46 23       	and	r20, r22
 5a0:	57 23       	and	r21, r23
 5a2:	45 2b       	or	r20, r21
 5a4:	11 f0       	breq	.+4      	; 0x5aa <SetInputOutput+0x98>
 5a6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <buttonLiftLed>
 5aa:	08 2e       	mov	r0, r24
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <SetInputOutput+0xa0>
 5ae:	75 95       	asr	r23
 5b0:	67 95       	ror	r22
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <SetInputOutput+0x9c>
 5b6:	60 fd       	sbrc	r22, 0
 5b8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <buttonFloorLed>
 5bc:	82 2f       	mov	r24, r18
 5be:	80 7f       	andi	r24, 0xF0	; 240
 5c0:	19 f0       	breq	.+6      	; 0x5c8 <SetInputOutput+0xb6>
 5c2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <buttonLiftLed_on>
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <SetInputOutput+0xb8>
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	2f 70       	andi	r18, 0x0F	; 15
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <SetInputOutput+0xc2>
 5ce:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <buttonFloorLed_On>
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <SetInputOutput+0xc4>
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <liftPosDisplay_On>
 5da:	81 11       	cpse	r24, r1
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <SetInputOutput+0xd4>
 5de:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <Elevator>
 5e2:	3f 73       	andi	r19, 0x3F	; 63
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <SetInputOutput+0xd6>
 5e6:	3f e3       	ldi	r19, 0x3F	; 63
 5e8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <liftDisplay7Seg_On>
 5ec:	81 11       	cpse	r24, r1
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <SetInputOutput+0xe4>
 5f0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <liftDisplay7Seg>
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <SetInputOutput+0xe6>
 5f6:	87 e0       	ldi	r24, 0x07	; 7
 5f8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <floorDisplayPort>
 5fc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <doorframe>
 600:	60 e4       	ldi	r22, 0x40	; 64
 602:	86 9f       	mul	r24, r22
 604:	a0 01       	movw	r20, r0
 606:	11 24       	eor	r1, r1
 608:	60 e8       	ldi	r22, 0x80	; 128
 60a:	96 9f       	mul	r25, r22
 60c:	c0 01       	movw	r24, r0
 60e:	11 24       	eor	r1, r1
 610:	84 2b       	or	r24, r20
 612:	83 2b       	or	r24, r19
 614:	88 bb       	out	0x18, r24	; 24
 616:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <buttonLiftLed>
 61a:	98 e0       	ldi	r25, 0x08	; 8
 61c:	89 9f       	mul	r24, r25
 61e:	a0 01       	movw	r20, r0
 620:	11 24       	eor	r1, r1
 622:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <buttonFloorLed>
 626:	30 e2       	ldi	r19, 0x20	; 32
 628:	93 9f       	mul	r25, r19
 62a:	c0 01       	movw	r24, r0
 62c:	11 24       	eor	r1, r1
 62e:	84 2b       	or	r24, r20
 630:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <floorDisplayPort>
 634:	38 2b       	or	r19, r24
 636:	40 e8       	ldi	r20, 0x80	; 128
 638:	24 9f       	mul	r18, r20
 63a:	c0 01       	movw	r24, r0
 63c:	11 24       	eor	r1, r1
 63e:	83 2b       	or	r24, r19
 640:	8b bb       	out	0x1b, r24	; 27
 642:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <USART_rxBufferOut>
 646:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 64a:	98 17       	cp	r25, r24
 64c:	b9 f0       	breq	.+46     	; 0x67c <SetInputOutput+0x16a>
 64e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <EnterAtomic>
 652:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <USART_rxBufferOut>
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	8e 0f       	add	r24, r30
 65a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	ea 5b       	subi	r30, 0xBA	; 186
 662:	fe 4f       	sbci	r31, 0xFE	; 254
 664:	c0 81       	ld	r28, Z
 666:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USART_rxBufferOut>
 66a:	8f 71       	andi	r24, 0x1F	; 31
 66c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <USART_rxBufferOut>
 670:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LeaveAtomic>
 674:	8c 2f       	mov	r24, r28
 676:	0e 94 60 02 	call	0x4c0	; 0x4c0 <HandleMessage>
 67a:	e3 cf       	rjmp	.-58     	; 0x642 <SetInputOutput+0x130>
 67c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <terminalRefreshCounter.1887>
 680:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <terminalRefreshCounter.1887+0x1>
 684:	9c 01       	movw	r18, r24
 686:	2f 5f       	subi	r18, 0xFF	; 255
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <terminalRefreshCounter.1887+0x1>
 68e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <terminalRefreshCounter.1887>
 692:	8f 3f       	cpi	r24, 0xFF	; 255
 694:	9f 40       	sbci	r25, 0x0F	; 15
 696:	c9 f4       	brne	.+50     	; 0x6ca <SetInputOutput+0x1b8>
 698:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <EnableStatusUpdate>
 69c:	88 23       	and	r24, r24
 69e:	a9 f0       	breq	.+42     	; 0x6ca <SetInputOutput+0x1b8>
 6a0:	84 e0       	ldi	r24, 0x04	; 4
 6a2:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 6a6:	86 e0       	ldi	r24, 0x06	; 6
 6a8:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 6ac:	85 ea       	ldi	r24, 0xA5	; 165
 6ae:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 6b2:	8a e5       	ldi	r24, 0x5A	; 90
 6b4:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 6b8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <SystemState>
 6bc:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 6c0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <OpenDoors>
 6c4:	cf 91       	pop	r28
 6c6:	0c 94 97 01 	jmp	0x32e	; 0x32e <Usart_PutChar>
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret

000006ce <InitializeStart>:
 6ce:	8a ec       	ldi	r24, 0xCA	; 202
 6d0:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 6d4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <liftPosDisplay_On>
 6d8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <buttonLiftLed_on>
 6dc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <liftDisplay7Seg_On>
 6e0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <buttonFloorLed_On>
 6e4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <doorframe>
 6e8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <liftDoorState+0x1>
 6ec:	80 e2       	ldi	r24, 0x20	; 32
 6ee:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <liftDoorState>
 6f2:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <liftDoorState+0x3>
 6f6:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <liftDoorState+0x2>
 6fa:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <liftDoorState+0x5>
 6fe:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <liftDoorState+0x4>
 702:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <liftDoorState+0x7>
 706:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <liftDoorState+0x6>
 70a:	8f e1       	ldi	r24, 0x1F	; 31
 70c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 710:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Elevator+0x1>
 714:	0e 94 4b 01 	call	0x296	; 0x296 <InitializeCounter>
 718:	20 e0       	ldi	r18, 0x00	; 0
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	61 ec       	ldi	r22, 0xC1	; 193
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	0e 94 9b 01 	call	0x336	; 0x336 <SendEvent>
 724:	8e ef       	ldi	r24, 0xFE	; 254
 726:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_PutChar>
 72a:	0e 94 10 01 	call	0x220	; 0x220 <DispatchEvent>
 72e:	0e 94 89 02 	call	0x512	; 0x512 <SetInputOutput>
 732:	fb cf       	rjmp	.-10     	; 0x72a <InitializeStart+0x5c>

00000734 <__vector_1>:
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
 756:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ButtonState>
 75a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <ButtonState+0x1>
 75e:	91 60       	ori	r25, 0x01	; 1
 760:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <ButtonState+0x1>
 764:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ButtonState>
 768:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <ButtonState>
 76c:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <ButtonState+0x1>
 770:	20 e0       	ldi	r18, 0x00	; 0
 772:	69 ec       	ldi	r22, 0xC9	; 201
 774:	80 e1       	ldi	r24, 0x10	; 16
 776:	0e 94 9b 01 	call	0x336	; 0x336 <SendEvent>
 77a:	ff 91       	pop	r31
 77c:	ef 91       	pop	r30
 77e:	bf 91       	pop	r27
 780:	af 91       	pop	r26
 782:	9f 91       	pop	r25
 784:	8f 91       	pop	r24
 786:	7f 91       	pop	r23
 788:	6f 91       	pop	r22
 78a:	5f 91       	pop	r21
 78c:	4f 91       	pop	r20
 78e:	3f 91       	pop	r19
 790:	2f 91       	pop	r18
 792:	0f 90       	pop	r0
 794:	0f be       	out	0x3f, r0	; 63
 796:	0f 90       	pop	r0
 798:	1f 90       	pop	r1
 79a:	18 95       	reti

0000079c <__vector_13>:
 79c:	1f 92       	push	r1
 79e:	0f 92       	push	r0
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	0f 92       	push	r0
 7a4:	11 24       	eor	r1, r1
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
 7b2:	5f 9b       	sbis	0x0b, 7	; 11
 7b4:	1e c0       	rjmp	.+60     	; 0x7f2 <__vector_13+0x56>
 7b6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 7ba:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <USART_rxBufferOut>
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	01 96       	adiw	r24, 0x01	; 1
 7c2:	8f 71       	andi	r24, 0x1F	; 31
 7c4:	99 27       	eor	r25, r25
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	82 17       	cp	r24, r18
 7ca:	93 07       	cpc	r25, r19
 7cc:	89 f0       	breq	.+34     	; 0x7f0 <__vector_13+0x54>
 7ce:	8c b1       	in	r24, 0x0c	; 12
 7d0:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <USART_rxBufferIn>
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	9e 0f       	add	r25, r30
 7d8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <USART_rxBufferIn>
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	ea 5b       	subi	r30, 0xBA	; 186
 7e0:	fe 4f       	sbci	r31, 0xFE	; 254
 7e2:	80 83       	st	Z, r24
 7e4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USART_rxBufferIn>
 7e8:	8f 71       	andi	r24, 0x1F	; 31
 7ea:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <USART_rxBufferIn>
 7ee:	e1 cf       	rjmp	.-62     	; 0x7b2 <__vector_13+0x16>
 7f0:	57 98       	cbi	0x0a, 7	; 10
 7f2:	ff 91       	pop	r31
 7f4:	ef 91       	pop	r30
 7f6:	9f 91       	pop	r25
 7f8:	8f 91       	pop	r24
 7fa:	3f 91       	pop	r19
 7fc:	2f 91       	pop	r18
 7fe:	0f 90       	pop	r0
 800:	0f be       	out	0x3f, r0	; 63
 802:	0f 90       	pop	r0
 804:	1f 90       	pop	r1
 806:	18 95       	reti

00000808 <__vector_7>:
 808:	1f 92       	push	r1
 80a:	0f 92       	push	r0
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	0f 92       	push	r0
 810:	11 24       	eor	r1, r1
 812:	2f 93       	push	r18
 814:	3f 93       	push	r19
 816:	4f 93       	push	r20
 818:	5f 93       	push	r21
 81a:	6f 93       	push	r22
 81c:	7f 93       	push	r23
 81e:	8f 93       	push	r24
 820:	9f 93       	push	r25
 822:	af 93       	push	r26
 824:	bf 93       	push	r27
 826:	ef 93       	push	r30
 828:	ff 93       	push	r31
 82a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <ElevatorTick.1962>
 82e:	8f 5f       	subi	r24, 0xFF	; 255
 830:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <ElevatorTick.1962>
 834:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__data_end>
 838:	9f 5f       	subi	r25, 0xFF	; 255
 83a:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__data_end>
 83e:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <Elevator+0x2>
 842:	0e 94 b6 04 	call	0x96c	; 0x96c <__udivmodqi4>
 846:	91 11       	cpse	r25, r1
 848:	14 c0       	rjmp	.+40     	; 0x872 <__stack+0x13>
 84a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Elevator>
 84e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <Elevator+0x1>
 852:	96 17       	cp	r25, r22
 854:	61 f0       	breq	.+24     	; 0x86e <__stack+0xf>
 856:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Elevator+0x4>
 85a:	89 0f       	add	r24, r25
 85c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Elevator>
 860:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Elevator+0x5>
 864:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Elevator+0x6>
 868:	30 97       	sbiw	r30, 0x00	; 0
 86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
 86c:	09 95       	icall
 86e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <ElevatorTick.1962>
 872:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 876:	6c e0       	ldi	r22, 0x0C	; 12
 878:	0e 94 b6 04 	call	0x96c	; 0x96c <__udivmodqi4>
 87c:	91 11       	cpse	r25, r1
 87e:	04 c0       	rjmp	.+8      	; 0x888 <__stack+0x29>
 880:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 884:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MakeDoorStates>
 888:	ff 91       	pop	r31
 88a:	ef 91       	pop	r30
 88c:	bf 91       	pop	r27
 88e:	af 91       	pop	r26
 890:	9f 91       	pop	r25
 892:	8f 91       	pop	r24
 894:	7f 91       	pop	r23
 896:	6f 91       	pop	r22
 898:	5f 91       	pop	r21
 89a:	4f 91       	pop	r20
 89c:	3f 91       	pop	r19
 89e:	2f 91       	pop	r18
 8a0:	0f 90       	pop	r0
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	0f 90       	pop	r0
 8a6:	1f 90       	pop	r1
 8a8:	18 95       	reti

000008aa <__vector_10>:


ISR(TIMER0_COMP_vect)
{
 8aa:	1f 92       	push	r1
 8ac:	0f 92       	push	r0
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	0f 92       	push	r0
 8b2:	11 24       	eor	r1, r1
 8b4:	cf 92       	push	r12
 8b6:	df 92       	push	r13
 8b8:	ff 92       	push	r15
 8ba:	0f 93       	push	r16
 8bc:	1f 93       	push	r17
 8be:	2f 93       	push	r18
 8c0:	3f 93       	push	r19
 8c2:	4f 93       	push	r20
 8c4:	5f 93       	push	r21
 8c6:	6f 93       	push	r22
 8c8:	7f 93       	push	r23
 8ca:	8f 93       	push	r24
 8cc:	9f 93       	push	r25
 8ce:	af 93       	push	r26
 8d0:	bf 93       	push	r27
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	ef 93       	push	r30
 8d8:	ff 93       	push	r31
 8da:	03 e3       	ldi	r16, 0x33	; 51
 8dc:	11 e0       	ldi	r17, 0x01	; 1

	for( int i = 0; i <8; i++ )
 8de:	c0 e0       	ldi	r28, 0x00	; 0
 8e0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			WaitingTimer[i]--;
			if( WaitingTimer[i]==0)
			{
				SendEvent(SignalSourceEnvironment, TimerEvent, 0, 0);
				UsedTimers &= ~(1<<i);
 8e2:	cc 24       	eor	r12, r12
 8e4:	c3 94       	inc	r12
 8e6:	d1 2c       	mov	r13, r1
ISR(TIMER0_COMP_vect)
{

	for( int i = 0; i <8; i++ )
	{
		if( UsedTimers&(1<<i))
 8e8:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <UsedTimers>
 8ec:	8f 2d       	mov	r24, r15
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0c 2e       	mov	r0, r28
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__vector_10+0x4e>
 8f4:	95 95       	asr	r25
 8f6:	87 95       	ror	r24
 8f8:	0a 94       	dec	r0
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__vector_10+0x4a>
 8fc:	80 ff       	sbrs	r24, 0
 8fe:	18 c0       	rjmp	.+48     	; 0x930 <__vector_10+0x86>
		{
			WaitingTimer[i]--;
 900:	f8 01       	movw	r30, r16
 902:	80 81       	ld	r24, Z
 904:	91 81       	ldd	r25, Z+1	; 0x01
 906:	01 97       	sbiw	r24, 0x01	; 1
 908:	91 83       	std	Z+1, r25	; 0x01
 90a:	80 83       	st	Z, r24
			if( WaitingTimer[i]==0)
 90c:	89 2b       	or	r24, r25
 90e:	81 f4       	brne	.+32     	; 0x930 <__vector_10+0x86>
			{
				SendEvent(SignalSourceEnvironment, TimerEvent, 0, 0);
 910:	20 e0       	ldi	r18, 0x00	; 0
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	68 ec       	ldi	r22, 0xC8	; 200
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	0e 94 9b 01 	call	0x336	; 0x336 <SendEvent>
				UsedTimers &= ~(1<<i);
 91c:	c6 01       	movw	r24, r12
 91e:	0c 2e       	mov	r0, r28
 920:	01 c0       	rjmp	.+2      	; 0x924 <__vector_10+0x7a>
 922:	88 0f       	add	r24, r24
 924:	0a 94       	dec	r0
 926:	ea f7       	brpl	.-6      	; 0x922 <__vector_10+0x78>
 928:	80 95       	com	r24
 92a:	f8 22       	and	r15, r24
 92c:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <UsedTimers>


ISR(TIMER0_COMP_vect)
{

	for( int i = 0; i <8; i++ )
 930:	21 96       	adiw	r28, 0x01	; 1
 932:	0e 5f       	subi	r16, 0xFE	; 254
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	c8 30       	cpi	r28, 0x08	; 8
 938:	d1 05       	cpc	r29, r1
 93a:	b1 f6       	brne	.-84     	; 0x8e8 <__vector_10+0x3e>
				SendEvent(SignalSourceEnvironment, TimerEvent, 0, 0);
				UsedTimers &= ~(1<<i);
			}
		}
	}
}
 93c:	ff 91       	pop	r31
 93e:	ef 91       	pop	r30
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	bf 91       	pop	r27
 946:	af 91       	pop	r26
 948:	9f 91       	pop	r25
 94a:	8f 91       	pop	r24
 94c:	7f 91       	pop	r23
 94e:	6f 91       	pop	r22
 950:	5f 91       	pop	r21
 952:	4f 91       	pop	r20
 954:	3f 91       	pop	r19
 956:	2f 91       	pop	r18
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	df 90       	pop	r13
 960:	cf 90       	pop	r12
 962:	0f 90       	pop	r0
 964:	0f be       	out	0x3f, r0	; 63
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <__udivmodqi4>:
 96c:	99 1b       	sub	r25, r25
 96e:	79 e0       	ldi	r23, 0x09	; 9
 970:	04 c0       	rjmp	.+8      	; 0x97a <__udivmodqi4_ep>

00000972 <__udivmodqi4_loop>:
 972:	99 1f       	adc	r25, r25
 974:	96 17       	cp	r25, r22
 976:	08 f0       	brcs	.+2      	; 0x97a <__udivmodqi4_ep>
 978:	96 1b       	sub	r25, r22

0000097a <__udivmodqi4_ep>:
 97a:	88 1f       	adc	r24, r24
 97c:	7a 95       	dec	r23
 97e:	c9 f7       	brne	.-14     	; 0x972 <__udivmodqi4_loop>
 980:	80 95       	com	r24
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
