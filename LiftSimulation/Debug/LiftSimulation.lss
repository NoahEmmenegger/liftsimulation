
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000b9e  00000c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  00800094  00800094  00000c66  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000c66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028b3  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec5  00000000  00000000  000037cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001019  00000000  00000000  00004694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  000056b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001068  00000000  00000000  00005c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001501  00000000  00000000  00006ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000081e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



int main(void)
{
    InitializePorts();
  92:	0e 94 5d 02 	call	0x4ba	; 0x4ba <InitializePorts>
	Usart_Init();
  96:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Usart_Init>
	RegisterTestHandler( TestFunction );
  9a:	88 e7       	ldi	r24, 0x78	; 120
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	0e 94 4f 02 	call	0x49e	; 0x49e <RegisterTestHandler>
	RegisterFsm(&_motorCtrl.fsm);
  a2:	8f e6       	ldi	r24, 0x6F	; 111
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 b2 01 	call	0x364	; 0x364 <RegisterFsm>
	//RegisterFsm(&_buttonCtrl.fsm);
	RegisterFsm(&_mainCtrl.fsm);
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 b2 01 	call	0x364	; 0x364 <RegisterFsm>
	// letzte Funktion die aufgerufen wird!
	InitializeStart();
  b2:	0e 94 3b 04 	call	0x876	; 0x876 <InitializeStart>
	
	
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <MainCtrl_Initializing>:
		*floor = _mainCtrl.ElevatorNextPosQ[_mainCtrl.qOut];
		_mainCtrl.qOut = (_mainCtrl.qOut + 1)%countof(_mainCtrl.ElevatorNextPosQ);
		return true;
	}
	return false;
}
  bc:	fc 01       	movw	r30, r24
  be:	81 81       	ldd	r24, Z+1	; 0x01
  c0:	82 3c       	cpi	r24, 0xC2	; 194
  c2:	19 f4       	brne	.+6      	; 0xca <MainCtrl_Initializing+0xe>
  c4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
  c8:	08 95       	ret
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	49 f4       	brne	.+18     	; 0xe0 <MainCtrl_Initializing+0x24>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <EnableStatusUpdate>
  d4:	64 e8       	ldi	r22, 0x84	; 132
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 a2 01 	call	0x344	; 0x344 <SetState>
  e0:	08 95       	ret

000000e2 <FindBit>:

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
  e2:	88 23       	and	r24, r24
  e4:	49 f0       	breq	.+18     	; 0xf8 <FindBit+0x16>
	uint8_t pos = 0;
	while(!(value&1))
  e6:	80 fd       	sbrc	r24, 0
  e8:	09 c0       	rjmp	.+18     	; 0xfc <FindBit+0x1a>
  ea:	90 e0       	ldi	r25, 0x00	; 0
	{
		value >>=1;
  ec:	86 95       	lsr	r24
		pos++;
  ee:	9f 5f       	subi	r25, 0xFF	; 255

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
	uint8_t pos = 0;
	while(!(value&1))
  f0:	80 ff       	sbrs	r24, 0
  f2:	fc cf       	rjmp	.-8      	; 0xec <FindBit+0xa>
	{
		value >>=1;
		pos++;
  f4:	89 2f       	mov	r24, r25
  f6:	08 95       	ret
	return false;
}

uint8_t FindBit(uint8_t value)
{
	if( value == 0) return 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	08 95       	ret
	uint8_t pos = 0;
	while(!(value&1))
  fc:	80 e0       	ldi	r24, 0x00	; 0
	{
		value >>=1;
		pos++;
	}
	return pos;
}
  fe:	08 95       	ret

00000100 <GetFloorReservation>:



FloorType GetFloorReservation(uint8_t buttonEventParameter )
{
	return FindBit(buttonEventParameter) - 4;
 100:	0e 94 71 00 	call	0xe2	; 0xe2 <FindBit>
}
 104:	84 50       	subi	r24, 0x04	; 4
 106:	08 95       	ret

00000108 <MainCtrl_AwaitElevatorRequest>:
		return;
	}	
}

void MainCtrl_AwaitElevatorRequest(Message* msg)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	Usart_PutChar(0xA0);
 112:	80 ea       	ldi	r24, 0xA0	; 160
 114:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
	Usart_PutChar(msg->Id);
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>

	if( IS_BUTTON_PRESS( msg ) )
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	87 3c       	cpi	r24, 0xC7	; 199
 122:	09 f5       	brne	.+66     	; 0x166 <MainCtrl_AwaitElevatorRequest+0x5e>
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	09 f0       	breq	.+2      	; 0x12c <MainCtrl_AwaitElevatorRequest+0x24>
 12a:	3f c0       	rjmp	.+126    	; 0x1aa <MainCtrl_AwaitElevatorRequest+0xa2>
	{
		if( IS_RESERVATION(msg->MsgParamLow))
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	98 2f       	mov	r25, r24
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	d9 f1       	breq	.+118    	; 0x1aa <MainCtrl_AwaitElevatorRequest+0xa2>
		{
			FloorType reservation = GetFloorReservation(msg->MsgParamLow);
 134:	0e 94 80 00 	call	0x100	; 0x100 <GetFloorReservation>
			if( reservation != _mainCtrl.currentFloor )
 138:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 13c:	89 17       	cp	r24, r25
 13e:	49 f0       	breq	.+18     	; 0x152 <MainCtrl_AwaitElevatorRequest+0x4a>
			{			
				_mainCtrl.nextFloor = reservation;
 140:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
				SendEvent(SignalSourceApp, Message_MoveTo, _mainCtrl.nextFloor, 0);
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	48 2f       	mov	r20, r24
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
 150:	0a c0       	rjmp	.+20     	; 0x166 <MainCtrl_AwaitElevatorRequest+0x5e>
			}
			else if( reservation == _mainCtrl.currentFloor)
			{
				SetDoorState(DoorOpen, _mainCtrl.currentFloor);
 152:	68 2f       	mov	r22, r24
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	0e 94 17 02 	call	0x42e	; 0x42e <SetDoorState>
				_mainCtrl.timer = StartTimer(5000);
 15a:	88 e8       	ldi	r24, 0x88	; 136
 15c:	93 e1       	ldi	r25, 0x13	; 19
 15e:	0e 94 29 05 	call	0xa52	; 0xa52 <StartTimer>
 162:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			}
		}
	}
	if( msg->Id == TimerEvent )
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	88 3c       	cpi	r24, 0xC8	; 200
 16a:	71 f4       	brne	.+28     	; 0x188 <MainCtrl_AwaitElevatorRequest+0x80>
	{
		Usart_PutChar(0xA1);
 16c:	81 ea       	ldi	r24, 0xA1	; 161
 16e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
		Usart_PutChar(_mainCtrl.currentFloor);
 172:	00 e6       	ldi	r16, 0x60	; 96
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	f8 01       	movw	r30, r16
 178:	85 81       	ldd	r24, Z+5	; 0x05
 17a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
		SetDoorState(DoorClosed, _mainCtrl.currentFloor);
 17e:	f8 01       	movw	r30, r16
 180:	65 81       	ldd	r22, Z+5	; 0x05
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	0e 94 17 02 	call	0x42e	; 0x42e <SetDoorState>
	}
	
	if( msg->Id == Message_PosChanged)
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	71 f4       	brne	.+28     	; 0x1aa <MainCtrl_AwaitElevatorRequest+0xa2>
	{
		if( msg->MsgParamHigh == msg->MsgParamLow)
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	89 13       	cpse	r24, r25
 194:	0a c0       	rjmp	.+20     	; 0x1aa <MainCtrl_AwaitElevatorRequest+0xa2>
		{
			_mainCtrl.currentFloor = msg->MsgParamHigh/POS_STEPS_PER_FLOOR;
 196:	c0 e6       	ldi	r28, 0x60	; 96
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	82 95       	swap	r24
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	8d 83       	std	Y+5, r24	; 0x05
			_mainCtrl.timer = StartTimer(5000);
 1a0:	88 e8       	ldi	r24, 0x88	; 136
 1a2:	93 e1       	ldi	r25, 0x13	; 19
 1a4:	0e 94 29 05 	call	0xa52	; 0xa52 <StartTimer>
 1a8:	8f 83       	std	Y+7, r24	; 0x07
		}
	}
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <NotifyCalibrationDone>:
	.target = Floor0,
	.fsm  = { .Next = 0, .CurrentState = MotorCtrl_Initializing, .RxMask = 0xFF },
};

void NotifyCalibrationDone(uint8_t currentPos, uint8_t targetPostion)
{
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	d8 2f       	mov	r29, r24
 1bc:	16 2f       	mov	r17, r22
	FloorType floor = (FloorType)currentPos/POS_STEPS_PER_FLOOR;
 1be:	c8 2f       	mov	r28, r24
 1c0:	c2 95       	swap	r28
 1c2:	cf 70       	andi	r28, 0x0F	; 15
	SetDisplay(floor);
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0e 94 4c 02 	call	0x498	; 0x498 <SetDisplay>
	if( ((currentPos %floor) == 0 ) && floor == Floor0 )
 1ca:	8d 2f       	mov	r24, r29
 1cc:	6c 2f       	mov	r22, r28
 1ce:	0e 94 c1 05 	call	0xb82	; 0xb82 <__udivmodqi4>
 1d2:	91 11       	cpse	r25, r1
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <NotifyCalibrationDone+0x32>
 1d6:	c1 11       	cpse	r28, r1
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <NotifyCalibrationDone+0x32>
	{
		SendEvent(SignalSourceEnvironment, LiftCalibrated, currentPos, targetPostion);
 1da:	21 2f       	mov	r18, r17
 1dc:	4d 2f       	mov	r20, r29
 1de:	62 ec       	ldi	r22, 0xC2	; 194
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	08 95       	ret

000001ee <OnElevatorPositionChanged>:
		_motorCtrl.start = Floor0;
	}
}

void OnElevatorPositionChanged(uint8_t currentPos, uint8_t targetPos)
{
 1ee:	26 2f       	mov	r18, r22
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
 1f0:	48 2f       	mov	r20, r24
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
 1fa:	08 95       	ret

000001fc <MotorCtrl_Initializing>:
	}
}

void MotorCtrl_Initializing(Message* msg)
{
	if( msg->Id == LiftStarted)
 1fc:	fc 01       	movw	r30, r24
 1fe:	81 81       	ldd	r24, Z+1	; 0x01
 200:	81 3c       	cpi	r24, 0xC1	; 193
 202:	29 f4       	brne	.+10     	; 0x20e <MotorCtrl_Initializing+0x12>
	{
		CalibrateElevatorPosition(NotifyCalibrationDone);
 204:	8a ed       	ldi	r24, 0xDA	; 218
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 48 02 	call	0x490	; 0x490 <CalibrateElevatorPosition>
		return;
 20c:	08 95       	ret
	}
	if( msg->Id == LiftCalibrated )
 20e:	82 3c       	cpi	r24, 0xC2	; 194
 210:	89 f4       	brne	.+34     	; 0x234 <MotorCtrl_Initializing+0x38>
	{
		SetDisplay(Floor0);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 4c 02 	call	0x498	; 0x498 <SetDisplay>
		SendEvent(SignalSourceApp, Message_ElevatorReady, Floor0, 0);
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
		SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 224:	6b e1       	ldi	r22, 0x1B	; 27
 226:	71 e0       	ldi	r23, 0x01	; 1
 228:	8f e6       	ldi	r24, 0x6F	; 111
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 a2 01 	call	0x344	; 0x344 <SetState>
		_motorCtrl.start = Floor0;
 230:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <_motorCtrl+0x5>
 234:	08 95       	ret

00000236 <MotorCtrl_Stopped>:
	SendEvent(SignalSourceElevator, Message_PosChanged, currentPos, targetPos);
}


void MotorCtrl_Stopped(Message* msg)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
	if( msg->Id == Message_MoveTo && msg->MsgParamLow < 4)
 23a:	fc 01       	movw	r30, r24
 23c:	21 81       	ldd	r18, Z+1	; 0x01
 23e:	21 30       	cpi	r18, 0x01	; 1
 240:	79 f4       	brne	.+30     	; 0x260 <MotorCtrl_Stopped+0x2a>
 242:	82 81       	ldd	r24, Z+2	; 0x02
 244:	84 30       	cpi	r24, 0x04	; 4
 246:	60 f4       	brcc	.+24     	; 0x260 <MotorCtrl_Stopped+0x2a>
	{
		_motorCtrl.target = (FloorType)msg->MsgParamLow;
 248:	cf e6       	ldi	r28, 0x6F	; 111
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	8e 83       	std	Y+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, MotorCtrl_AwaitClosed);
 24e:	6f e3       	ldi	r22, 0x3F	; 63
 250:	71 e0       	ldi	r23, 0x01	; 1
 252:	ce 01       	movw	r24, r28
 254:	0e 94 a2 01 	call	0x344	; 0x344 <SetState>
		SetDoorState(DoorClosed, _motorCtrl.start);		
 258:	6d 81       	ldd	r22, Y+5	; 0x05
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	0e 94 17 02 	call	0x42e	; 0x42e <SetDoorState>
	}
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <MotorCtrl_AwaitOpen>:


void MotorCtrl_AwaitOpen(Message* msg)
{
	SetDoorState(DoorClosed, _motorCtrl.target);
 266:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <_motorCtrl+0x6>
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	0e 94 17 02 	call	0x42e	; 0x42e <SetDoorState>
	SetState(&_motorCtrl.fsm, MotorCtrl_Stopped);
 270:	6b e1       	ldi	r22, 0x1B	; 27
 272:	71 e0       	ldi	r23, 0x01	; 1
 274:	8f e6       	ldi	r24, 0x6F	; 111
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 a2 01 	call	0x344	; 0x344 <SetState>
 27c:	08 95       	ret

0000027e <MotorCtrl_AwaitClosed>:
}

void MotorCtrl_AwaitClosed(Message* msg)
{
	if(msg->Id == LiftDoorEvent && msg->MsgParamLow == DoorClosed)
 27e:	fc 01       	movw	r30, r24
 280:	21 81       	ldd	r18, Z+1	; 0x01
 282:	25 3c       	cpi	r18, 0xC5	; 197
 284:	b1 f4       	brne	.+44     	; 0x2b2 <MotorCtrl_AwaitClosed+0x34>
 286:	82 81       	ldd	r24, Z+2	; 0x02
 288:	80 32       	cpi	r24, 0x20	; 32
 28a:	99 f4       	brne	.+38     	; 0x2b2 <MotorCtrl_AwaitClosed+0x34>
	{
		if(_motorCtrl.start != _motorCtrl.target )
 28c:	ef e6       	ldi	r30, 0x6F	; 111
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	95 81       	ldd	r25, Z+5	; 0x05
 292:	86 81       	ldd	r24, Z+6	; 0x06
 294:	98 17       	cp	r25, r24
 296:	69 f0       	breq	.+26     	; 0x2b2 <MotorCtrl_AwaitClosed+0x34>
		{
			SetState(&_motorCtrl.fsm, MotorCtrl_Moving);
 298:	6a e5       	ldi	r22, 0x5A	; 90
 29a:	71 e0       	ldi	r23, 0x01	; 1
 29c:	cf 01       	movw	r24, r30
 29e:	0e 94 a2 01 	call	0x344	; 0x344 <SetState>
			MoveElevator(_motorCtrl.target * POS_STEPS_PER_FLOOR, OnElevatorPositionChanged );
 2a2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <_motorCtrl+0x6>
 2a6:	67 ef       	ldi	r22, 0xF7	; 247
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	82 95       	swap	r24
 2ac:	80 7f       	andi	r24, 0xF0	; 240
 2ae:	0e 94 34 02 	call	0x468	; 0x468 <MoveElevator>
 2b2:	08 95       	ret

000002b4 <MotorCtrl_Moving>:
	}
}
	

void MotorCtrl_Moving(Message* msg)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ec 01       	movw	r28, r24
	Usart_PutChar(msg->Id);
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
	// ist angekommen
	if( msg->Id == Message_PosChanged && msg->MsgParamLow == msg->MsgParamHigh)
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	91 f4       	brne	.+36     	; 0x2ea <MotorCtrl_Moving+0x36>
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	9b 81       	ldd	r25, Y+3	; 0x03
 2ca:	89 13       	cpse	r24, r25
 2cc:	0e c0       	rjmp	.+28     	; 0x2ea <MotorCtrl_Moving+0x36>
	{
		
		_motorCtrl.target = (FloorType)msg->MsgParamLow/POS_STEPS_PER_FLOOR;
 2ce:	cf e6       	ldi	r28, 0x6F	; 111
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	82 95       	swap	r24
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	8e 83       	std	Y+6, r24	; 0x06
		SetState(&_motorCtrl.fsm, MotorCtrl_AwaitOpen);
 2d8:	63 e3       	ldi	r22, 0x33	; 51
 2da:	71 e0       	ldi	r23, 0x01	; 1
 2dc:	ce 01       	movw	r24, r28
 2de:	0e 94 a2 01 	call	0x344	; 0x344 <SetState>
		SetDoorState(DoorOpen, _motorCtrl.target);
 2e2:	6e 81       	ldd	r22, Y+6	; 0x06
 2e4:	80 e1       	ldi	r24, 0x10	; 16
 2e6:	0e 94 17 02 	call	0x42e	; 0x42e <SetDoorState>
		
	}	
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <TestFunction>:
{
	
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	fc 01       	movw	r30, r24
	if( data[0] == 1 )
 2f6:	90 81       	ld	r25, Z
 2f8:	91 30       	cpi	r25, 0x01	; 1
 2fa:	49 f4       	brne	.+18     	; 0x30e <TestFunction+0x1e>
 2fc:	c8 e8       	ldi	r28, 0x88	; 136
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	88 e4       	ldi	r24, 0x48	; 72
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
		{
			Usart_PutChar(*ch++);
 302:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
	if( data[0] == 1 )
	{
		char *ch = "Hello-World\n";
		while( *ch != 0 )
 306:	89 91       	ld	r24, Y+
 308:	81 11       	cpse	r24, r1
 30a:	fb cf       	rjmp	.-10     	; 0x302 <TestFunction+0x12>
 30c:	08 c0       	rjmp	.+16     	; 0x31e <TestFunction+0x2e>
		{
			Usart_PutChar(*ch++);
		}
	}
	else if( data[0] == 2 )
 30e:	92 30       	cpi	r25, 0x02	; 2
 310:	31 f4       	brne	.+12     	; 0x31e <TestFunction+0x2e>
	{
		SendEvent(SignalSourceApp, Message_MoveTo, data[1], 0);
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	41 81       	ldd	r20, Z+1	; 0x01
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	80 e2       	ldi	r24, 0x20	; 32
 31a:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
	}
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <EnterAtomic>:
 324:	f8 94       	cli
 326:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 330:	08 95       	ret

00000332 <LeaveAtomic>:
 332:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <enterAtomicNesting>
 336:	81 50       	subi	r24, 0x01	; 1
 338:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enterAtomicNesting>
 33c:	81 11       	cpse	r24, r1
 33e:	01 c0       	rjmp	.+2      	; 0x342 <LeaveAtomic+0x10>
 340:	78 94       	sei
 342:	08 95       	ret

00000344 <SetState>:
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ec 01       	movw	r28, r24
 34e:	8b 01       	movw	r16, r22
 350:	0e 94 92 01 	call	0x324	; 0x324 <EnterAtomic>
 354:	1c 83       	std	Y+4, r17	; 0x04
 356:	0b 83       	std	Y+3, r16	; 0x03
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	0c 94 99 01 	jmp	0x332	; 0x332 <LeaveAtomic>

00000364 <RegisterFsm>:
 364:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <anchor>
 368:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <anchor+0x1>
 36c:	a6 e7       	ldi	r26, 0x76	; 118
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	e6 37       	cpi	r30, 0x76	; 118
 374:	f2 07       	cpc	r31, r18
 376:	29 f0       	breq	.+10     	; 0x382 <RegisterFsm+0x1e>
 378:	df 01       	movw	r26, r30
 37a:	01 90       	ld	r0, Z+
 37c:	f0 81       	ld	r31, Z
 37e:	e0 2d       	mov	r30, r0
 380:	f7 cf       	rjmp	.-18     	; 0x370 <RegisterFsm+0xc>
 382:	8d 93       	st	X+, r24
 384:	9c 93       	st	X, r25
 386:	dc 01       	movw	r26, r24
 388:	ed 93       	st	X+, r30
 38a:	fc 93       	st	X, r31
 38c:	08 95       	ret

0000038e <DispatchEvent>:
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	0e 94 92 01 	call	0x324	; 0x324 <EnterAtomic>
 39a:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <msgQ_out>
 39e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 3a2:	98 17       	cp	r25, r24
 3a4:	59 f0       	breq	.+22     	; 0x3bc <DispatchEvent+0x2e>
 3a6:	84 e0       	ldi	r24, 0x04	; 4
 3a8:	98 9f       	mul	r25, r24
 3aa:	e0 01       	movw	r28, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	c1 55       	subi	r28, 0x51	; 81
 3b0:	df 4f       	sbci	r29, 0xFF	; 255
 3b2:	9f 5f       	subi	r25, 0xFF	; 255
 3b4:	9f 71       	andi	r25, 0x1F	; 31
 3b6:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <msgQ_out>
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DispatchEvent+0x32>
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	d0 e0       	ldi	r29, 0x00	; 0
 3c0:	0e 94 99 01 	call	0x332	; 0x332 <LeaveAtomic>
 3c4:	20 97       	sbiw	r28, 0x00	; 0
 3c6:	c9 f0       	breq	.+50     	; 0x3fa <DispatchEvent+0x6c>
 3c8:	00 91 76 00 	lds	r16, 0x0076	; 0x800076 <anchor>
 3cc:	10 91 77 00 	lds	r17, 0x0077	; 0x800077 <anchor+0x1>
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	06 37       	cpi	r16, 0x76	; 118
 3d4:	1f 07       	cpc	r17, r31
 3d6:	89 f0       	breq	.+34     	; 0x3fa <DispatchEvent+0x6c>
 3d8:	d8 01       	movw	r26, r16
 3da:	12 96       	adiw	r26, 0x02	; 2
 3dc:	9c 91       	ld	r25, X
 3de:	12 97       	sbiw	r26, 0x02	; 2
 3e0:	88 81       	ld	r24, Y
 3e2:	89 23       	and	r24, r25
 3e4:	31 f0       	breq	.+12     	; 0x3f2 <DispatchEvent+0x64>
 3e6:	13 96       	adiw	r26, 0x03	; 3
 3e8:	ed 91       	ld	r30, X+
 3ea:	fc 91       	ld	r31, X
 3ec:	14 97       	sbiw	r26, 0x04	; 4
 3ee:	ce 01       	movw	r24, r28
 3f0:	09 95       	icall
 3f2:	f8 01       	movw	r30, r16
 3f4:	00 81       	ld	r16, Z
 3f6:	11 81       	ldd	r17, Z+1	; 0x01
 3f8:	eb cf       	rjmp	.-42     	; 0x3d0 <DispatchEvent+0x42>
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	08 95       	ret

00000404 <InitializeCounter>:
 404:	12 be       	out	0x32, r1	; 50
 406:	8b e0       	ldi	r24, 0x0B	; 11
 408:	83 bf       	out	0x33, r24	; 51
 40a:	8d e7       	ldi	r24, 0x7D	; 125
 40c:	8c bf       	out	0x3c, r24	; 60
 40e:	89 b7       	in	r24, 0x39	; 57
 410:	82 60       	ori	r24, 0x02	; 2
 412:	89 bf       	out	0x39, r24	; 57
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	9b bd       	out	0x2b, r25	; 43
 41a:	8a bd       	out	0x2a, r24	; 42
 41c:	1d bc       	out	0x2d, r1	; 45
 41e:	1c bc       	out	0x2c, r1	; 44
 420:	1f bc       	out	0x2f, r1	; 47
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	8e bd       	out	0x2e, r24	; 46
 426:	89 b7       	in	r24, 0x39	; 57
 428:	80 61       	ori	r24, 0x10	; 16
 42a:	89 bf       	out	0x39, r24	; 57
 42c:	08 95       	ret

0000042e <SetDoorState>:
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	d8 2f       	mov	r29, r24
 434:	c6 2f       	mov	r28, r22
 436:	0e 94 92 01 	call	0x324	; 0x324 <EnterAtomic>
 43a:	6c 2f       	mov	r22, r28
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	8d 2f       	mov	r24, r29
 440:	80 73       	andi	r24, 0x30	; 48
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	fb 01       	movw	r30, r22
 448:	ec 58       	subi	r30, 0x8C	; 140
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	90 81       	ld	r25, Z
 44e:	98 23       	and	r25, r24
 450:	11 f4       	brne	.+4      	; 0x456 <SetDoorState+0x28>
 452:	94 e0       	ldi	r25, 0x04	; 4
 454:	91 83       	std	Z+1, r25	; 0x01
 456:	fb 01       	movw	r30, r22
 458:	ec 58       	subi	r30, 0x8C	; 140
 45a:	fe 4f       	sbci	r31, 0xFE	; 254
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	80 83       	st	Z, r24
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	0c 94 99 01 	jmp	0x332	; 0x332 <LeaveAtomic>

00000468 <MoveElevator>:
 468:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 46c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <Elevator+0x4>
 470:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <Elevator+0x6>
 474:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <Elevator+0x5>
 478:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 47c:	98 17       	cp	r25, r24
 47e:	10 f4       	brcc	.+4      	; 0x484 <MoveElevator+0x1c>
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	03 c0       	rjmp	.+6      	; 0x48a <MoveElevator+0x22>
 484:	89 17       	cp	r24, r25
 486:	18 f4       	brcc	.+6      	; 0x48e <MoveElevator+0x26>
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Elevator+0x4>
 48e:	08 95       	ret

00000490 <CalibrateElevatorPosition>:
 490:	bc 01       	movw	r22, r24
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0c 94 34 02 	jmp	0x468	; 0x468 <MoveElevator>

00000498 <SetDisplay>:
 498:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <liftDisplay7Seg>
 49c:	08 95       	ret

0000049e <RegisterTestHandler>:
 49e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_testHandler+0x1>
 4a2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_testHandler>
 4a6:	08 95       	ret

000004a8 <Usart_Init>:
 4a8:	10 bc       	out	0x20, r1	; 32
 4aa:	8c e0       	ldi	r24, 0x0C	; 12
 4ac:	89 b9       	out	0x09, r24	; 9
 4ae:	86 e8       	ldi	r24, 0x86	; 134
 4b0:	80 bd       	out	0x20, r24	; 32
 4b2:	88 e9       	ldi	r24, 0x98	; 152
 4b4:	8a b9       	out	0x0a, r24	; 10
 4b6:	78 94       	sei
 4b8:	08 95       	ret

000004ba <InitializePorts>:
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	87 bb       	out	0x17, r24	; 23
 4be:	84 bb       	out	0x14, r24	; 20
 4c0:	8a bb       	out	0x1a, r24	; 26
 4c2:	11 ba       	out	0x11, r1	; 17
 4c4:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Usart_Init>
 4c8:	85 b7       	in	r24, 0x35	; 53
 4ca:	83 60       	ori	r24, 0x03	; 3
 4cc:	85 bf       	out	0x35, r24	; 53
 4ce:	8b b7       	in	r24, 0x3b	; 59
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	8b bf       	out	0x3b, r24	; 59
 4d4:	08 95       	ret

000004d6 <Usart_PutChar>:
 4d6:	8c b9       	out	0x0c, r24	; 12
 4d8:	5d 9b       	sbis	0x0b, 5	; 11
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <Usart_PutChar+0x2>
 4dc:	08 95       	ret

000004de <SendEvent>:
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	c8 2f       	mov	r28, r24
 4e8:	06 2f       	mov	r16, r22
 4ea:	d4 2f       	mov	r29, r20
 4ec:	12 2f       	mov	r17, r18
 4ee:	0e 94 92 01 	call	0x324	; 0x324 <EnterAtomic>
 4f2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <msgQ_in>
 4f6:	e8 2f       	mov	r30, r24
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	af 01       	movw	r20, r30
 4fc:	4f 5f       	subi	r20, 0xFF	; 255
 4fe:	5f 4f       	sbci	r21, 0xFF	; 255
 500:	4f 71       	andi	r20, 0x1F	; 31
 502:	55 27       	eor	r21, r21
 504:	20 91 ad 00 	lds	r18, 0x00AD	; 0x8000ad <msgQ_out>
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	42 17       	cp	r20, r18
 50c:	53 07       	cpc	r21, r19
 50e:	71 f4       	brne	.+28     	; 0x52c <SendEvent+0x4e>
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 522:	8e ed       	ldi	r24, 0xDE	; 222
 524:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 528:	8d ea       	ldi	r24, 0xAD	; 173
 52a:	f9 cf       	rjmp	.-14     	; 0x51e <SendEvent+0x40>
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	e1 55       	subi	r30, 0x51	; 81
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	01 83       	std	Z+1, r16	; 0x01
 53a:	13 83       	std	Z+3, r17	; 0x03
 53c:	d2 83       	std	Z+2, r29	; 0x02
 53e:	c0 83       	st	Z, r28
 540:	8f 5f       	subi	r24, 0xFF	; 255
 542:	8f 71       	andi	r24, 0x1F	; 31
 544:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <msgQ_in>
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	0c 94 99 01 	jmp	0x332	; 0x332 <LeaveAtomic>

00000554 <MakeDoorStates>:
 554:	df 92       	push	r13
 556:	ef 92       	push	r14
 558:	ff 92       	push	r15
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	c4 e7       	ldi	r28, 0x74	; 116
 564:	d1 e0       	ldi	r29, 0x01	; 1
 566:	00 e0       	ldi	r16, 0x00	; 0
 568:	10 e0       	ldi	r17, 0x00	; 0
 56a:	ee 24       	eor	r14, r14
 56c:	e3 94       	inc	r14
 56e:	f1 2c       	mov	r15, r1
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	81 11       	cpse	r24, r1
 574:	24 c0       	rjmp	.+72     	; 0x5be <MakeDoorStates+0x6a>
 576:	48 81       	ld	r20, Y
 578:	40 ff       	sbrs	r20, 0
 57a:	23 c0       	rjmp	.+70     	; 0x5c2 <MakeDoorStates+0x6e>
 57c:	4e 7f       	andi	r20, 0xFE	; 254
 57e:	48 83       	st	Y, r20
 580:	20 2f       	mov	r18, r16
 582:	65 ec       	ldi	r22, 0xC5	; 197
 584:	80 e1       	ldi	r24, 0x10	; 16
 586:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
 58a:	88 81       	ld	r24, Y
 58c:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <OpenDoors>
 590:	84 ff       	sbrs	r24, 4
 592:	0a c0       	rjmp	.+20     	; 0x5a8 <MakeDoorStates+0x54>
 594:	97 01       	movw	r18, r14
 596:	00 2e       	mov	r0, r16
 598:	01 c0       	rjmp	.+2      	; 0x59c <MakeDoorStates+0x48>
 59a:	22 0f       	add	r18, r18
 59c:	0a 94       	dec	r0
 59e:	ea f7       	brpl	.-6      	; 0x59a <MakeDoorStates+0x46>
 5a0:	24 2b       	or	r18, r20
 5a2:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <OpenDoors>
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <MakeDoorStates+0x6e>
 5a8:	c7 01       	movw	r24, r14
 5aa:	00 2e       	mov	r0, r16
 5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <MakeDoorStates+0x5c>
 5ae:	88 0f       	add	r24, r24
 5b0:	0a 94       	dec	r0
 5b2:	ea f7       	brpl	.-6      	; 0x5ae <MakeDoorStates+0x5a>
 5b4:	80 95       	com	r24
 5b6:	84 23       	and	r24, r20
 5b8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <OpenDoors>
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <MakeDoorStates+0x6e>
 5be:	81 50       	subi	r24, 0x01	; 1
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	0f 5f       	subi	r16, 0xFF	; 255
 5c4:	1f 4f       	sbci	r17, 0xFF	; 255
 5c6:	22 96       	adiw	r28, 0x02	; 2
 5c8:	04 30       	cpi	r16, 0x04	; 4
 5ca:	11 05       	cpc	r17, r1
 5cc:	89 f6       	brne	.-94     	; 0x570 <MakeDoorStates+0x1c>
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	df 90       	pop	r13
 5dc:	08 95       	ret

000005de <ProcessMessage>:
 5de:	db 01       	movw	r26, r22
 5e0:	82 30       	cpi	r24, 0x02	; 2
 5e2:	b1 f5       	brne	.+108    	; 0x650 <ProcessMessage+0x72>
 5e4:	8c 91       	ld	r24, X
 5e6:	98 2f       	mov	r25, r24
 5e8:	90 72       	andi	r25, 0x20	; 32
 5ea:	28 2f       	mov	r18, r24
 5ec:	20 76       	andi	r18, 0x60	; 96
 5ee:	d9 f1       	breq	.+118    	; 0x666 <ProcessMessage+0x88>
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	38 2f       	mov	r19, r24
 5f4:	30 71       	andi	r19, 0x10	; 16
 5f6:	84 ff       	sbrs	r24, 4
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	99 23       	and	r25, r25
 5fc:	11 f0       	breq	.+4      	; 0x602 <ProcessMessage+0x24>
 5fe:	94 e0       	ldi	r25, 0x04	; 4
 600:	01 c0       	rjmp	.+2      	; 0x604 <ProcessMessage+0x26>
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	8f 70       	andi	r24, 0x0F	; 15
 606:	89 0f       	add	r24, r25
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <ProcessMessage+0x34>
 60e:	44 0f       	add	r20, r20
 610:	55 1f       	adc	r21, r21
 612:	8a 95       	dec	r24
 614:	e2 f7       	brpl	.-8      	; 0x60e <ProcessMessage+0x30>
 616:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 61a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 61e:	ba 01       	movw	r22, r20
 620:	60 95       	com	r22
 622:	70 95       	com	r23
 624:	86 23       	and	r24, r22
 626:	97 23       	and	r25, r23
 628:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 62c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 630:	33 23       	and	r19, r19
 632:	51 f0       	breq	.+20     	; 0x648 <ProcessMessage+0x6a>
 634:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 638:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 63c:	84 2b       	or	r24, r20
 63e:	95 2b       	or	r25, r21
 640:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 644:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 648:	67 ec       	ldi	r22, 0xC7	; 199
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <SendEvent>
 650:	83 30       	cpi	r24, 0x03	; 3
 652:	49 f4       	brne	.+18     	; 0x666 <ProcessMessage+0x88>
 654:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <_testHandler>
 658:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <_testHandler+0x1>
 65c:	30 97       	sbiw	r30, 0x00	; 0
 65e:	19 f0       	breq	.+6      	; 0x666 <ProcessMessage+0x88>
 660:	64 2f       	mov	r22, r20
 662:	cd 01       	movw	r24, r26
 664:	09 94       	ijmp
 666:	08 95       	ret

00000668 <HandleMessage>:
 668:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <msgType.1871>
 66c:	91 11       	cpse	r25, r1
 66e:	05 c0       	rjmp	.+10     	; 0x67a <HandleMessage+0x12>
 670:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <msgType.1871>
 674:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <msgLen.1872>
 678:	08 95       	ret
 67a:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <msgLen.1872>
 67e:	41 11       	cpse	r20, r1
 680:	04 c0       	rjmp	.+8      	; 0x68a <HandleMessage+0x22>
 682:	82 50       	subi	r24, 0x02	; 2
 684:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <msgLen.1872>
 688:	15 c0       	rjmp	.+42     	; 0x6b4 <HandleMessage+0x4c>
 68a:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <bufferIndex.1870>
 68e:	e4 17       	cp	r30, r20
 690:	98 f4       	brcc	.+38     	; 0x6b8 <HandleMessage+0x50>
 692:	21 e0       	ldi	r18, 0x01	; 1
 694:	2e 0f       	add	r18, r30
 696:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <bufferIndex.1870>
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	e4 56       	subi	r30, 0x64	; 100
 69e:	ff 4f       	sbci	r31, 0xFF	; 255
 6a0:	80 83       	st	Z, r24
 6a2:	42 13       	cpse	r20, r18
 6a4:	09 c0       	rjmp	.+18     	; 0x6b8 <HandleMessage+0x50>
 6a6:	6c e9       	ldi	r22, 0x9C	; 156
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	89 2f       	mov	r24, r25
 6ac:	0e 94 ef 02 	call	0x5de	; 0x5de <ProcessMessage>
 6b0:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <msgType.1871>
 6b4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <bufferIndex.1870>
 6b8:	08 95       	ret

000006ba <SetInputOutput>:
 6ba:	cf 93       	push	r28
 6bc:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <outputRefreshCounter.1884>
 6c0:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <outputRefreshCounter.1884+0x1>
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <outputRefreshCounter.1884+0x1>
 6ca:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <outputRefreshCounter.1884>
 6ce:	83 70       	andi	r24, 0x03	; 3
 6d0:	99 27       	eor	r25, r25
 6d2:	89 2b       	or	r24, r25
 6d4:	21 f5       	brne	.+72     	; 0x71e <SetInputOutput+0x64>
 6d6:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <doorRefreshCounter.1885>
 6da:	8f 5f       	subi	r24, 0xFF	; 255
 6dc:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <doorRefreshCounter.1885>
 6e0:	83 70       	andi	r24, 0x03	; 3
 6e2:	a8 2f       	mov	r26, r24
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
 6e6:	aa 0f       	add	r26, r26
 6e8:	bb 1f       	adc	r27, r27
 6ea:	ac 58       	subi	r26, 0x8C	; 140
 6ec:	be 4f       	sbci	r27, 0xFE	; 254
 6ee:	11 96       	adiw	r26, 0x01	; 1
 6f0:	ec 91       	ld	r30, X
 6f2:	11 97       	sbiw	r26, 0x01	; 1
 6f4:	9c 91       	ld	r25, X
 6f6:	94 ff       	sbrs	r25, 4
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <SetInputOutput+0x46>
 6fa:	94 e0       	ldi	r25, 0x04	; 4
 6fc:	9e 1b       	sub	r25, r30
 6fe:	e9 2f       	mov	r30, r25
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	ee 57       	subi	r30, 0x7E	; 126
 704:	ff 4f       	sbci	r31, 0xFF	; 255
 706:	21 e0       	ldi	r18, 0x01	; 1
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	a9 01       	movw	r20, r18
 70c:	02 c0       	rjmp	.+4      	; 0x712 <SetInputOutput+0x58>
 70e:	44 0f       	add	r20, r20
 710:	55 1f       	adc	r21, r21
 712:	8a 95       	dec	r24
 714:	e2 f7       	brpl	.-8      	; 0x70e <SetInputOutput+0x54>
 716:	ca 01       	movw	r24, r20
 718:	90 81       	ld	r25, Z
 71a:	89 2b       	or	r24, r25
 71c:	85 bb       	out	0x15, r24	; 21
 71e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <buttonRefreshCounter.1886>
 722:	8f 5f       	subi	r24, 0xFF	; 255
 724:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <buttonRefreshCounter.1886>
 728:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <displayCache>
 72c:	22 23       	and	r18, r18
 72e:	01 f1       	breq	.+64     	; 0x770 <SetInputOutput+0xb6>
 730:	83 70       	andi	r24, 0x03	; 3
 732:	62 2f       	mov	r22, r18
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	40 e1       	ldi	r20, 0x10	; 16
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	08 2e       	mov	r0, r24
 73c:	02 c0       	rjmp	.+4      	; 0x742 <SetInputOutput+0x88>
 73e:	44 0f       	add	r20, r20
 740:	55 1f       	adc	r21, r21
 742:	0a 94       	dec	r0
 744:	e2 f7       	brpl	.-8      	; 0x73e <SetInputOutput+0x84>
 746:	46 23       	and	r20, r22
 748:	57 23       	and	r21, r23
 74a:	45 2b       	or	r20, r21
 74c:	11 f0       	breq	.+4      	; 0x752 <SetInputOutput+0x98>
 74e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <buttonLiftLed>
 752:	08 2e       	mov	r0, r24
 754:	02 c0       	rjmp	.+4      	; 0x75a <SetInputOutput+0xa0>
 756:	75 95       	asr	r23
 758:	67 95       	ror	r22
 75a:	0a 94       	dec	r0
 75c:	e2 f7       	brpl	.-8      	; 0x756 <SetInputOutput+0x9c>
 75e:	60 fd       	sbrc	r22, 0
 760:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <buttonFloorLed>
 764:	82 2f       	mov	r24, r18
 766:	80 7f       	andi	r24, 0xF0	; 240
 768:	19 f0       	breq	.+6      	; 0x770 <SetInputOutput+0xb6>
 76a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <buttonLiftLed_on>
 76e:	01 c0       	rjmp	.+2      	; 0x772 <SetInputOutput+0xb8>
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	2f 70       	andi	r18, 0x0F	; 15
 774:	19 f0       	breq	.+6      	; 0x77c <SetInputOutput+0xc2>
 776:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <buttonFloorLed_On>
 77a:	01 c0       	rjmp	.+2      	; 0x77e <SetInputOutput+0xc4>
 77c:	21 e0       	ldi	r18, 0x01	; 1
 77e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <liftPosDisplay_On>
 782:	81 11       	cpse	r24, r1
 784:	04 c0       	rjmp	.+8      	; 0x78e <SetInputOutput+0xd4>
 786:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <Elevator>
 78a:	3f 73       	andi	r19, 0x3F	; 63
 78c:	01 c0       	rjmp	.+2      	; 0x790 <SetInputOutput+0xd6>
 78e:	3f e3       	ldi	r19, 0x3F	; 63
 790:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <liftDisplay7Seg_On>
 794:	81 11       	cpse	r24, r1
 796:	03 c0       	rjmp	.+6      	; 0x79e <SetInputOutput+0xe4>
 798:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <liftDisplay7Seg>
 79c:	01 c0       	rjmp	.+2      	; 0x7a0 <SetInputOutput+0xe6>
 79e:	87 e0       	ldi	r24, 0x07	; 7
 7a0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <floorDisplayPort>
 7a4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <doorframe>
 7a8:	60 e4       	ldi	r22, 0x40	; 64
 7aa:	86 9f       	mul	r24, r22
 7ac:	a0 01       	movw	r20, r0
 7ae:	11 24       	eor	r1, r1
 7b0:	60 e8       	ldi	r22, 0x80	; 128
 7b2:	96 9f       	mul	r25, r22
 7b4:	c0 01       	movw	r24, r0
 7b6:	11 24       	eor	r1, r1
 7b8:	84 2b       	or	r24, r20
 7ba:	83 2b       	or	r24, r19
 7bc:	88 bb       	out	0x18, r24	; 24
 7be:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <buttonLiftLed>
 7c2:	98 e0       	ldi	r25, 0x08	; 8
 7c4:	89 9f       	mul	r24, r25
 7c6:	a0 01       	movw	r20, r0
 7c8:	11 24       	eor	r1, r1
 7ca:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <buttonFloorLed>
 7ce:	30 e2       	ldi	r19, 0x20	; 32
 7d0:	93 9f       	mul	r25, r19
 7d2:	c0 01       	movw	r24, r0
 7d4:	11 24       	eor	r1, r1
 7d6:	84 2b       	or	r24, r20
 7d8:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <floorDisplayPort>
 7dc:	38 2b       	or	r19, r24
 7de:	40 e8       	ldi	r20, 0x80	; 128
 7e0:	24 9f       	mul	r18, r20
 7e2:	c0 01       	movw	r24, r0
 7e4:	11 24       	eor	r1, r1
 7e6:	83 2b       	or	r24, r19
 7e8:	8b bb       	out	0x1b, r24	; 27
 7ea:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <USART_rxBufferOut>
 7ee:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 7f2:	98 17       	cp	r25, r24
 7f4:	b9 f0       	breq	.+46     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7f6:	0e 94 92 01 	call	0x324	; 0x324 <EnterAtomic>
 7fa:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <USART_rxBufferOut>
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	8e 0f       	add	r24, r30
 802:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	ec 5a       	subi	r30, 0xAC	; 172
 80a:	fe 4f       	sbci	r31, 0xFE	; 254
 80c:	c0 81       	ld	r28, Z
 80e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USART_rxBufferOut>
 812:	8f 71       	andi	r24, 0x1F	; 31
 814:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <USART_rxBufferOut>
 818:	0e 94 99 01 	call	0x332	; 0x332 <LeaveAtomic>
 81c:	8c 2f       	mov	r24, r28
 81e:	0e 94 34 03 	call	0x668	; 0x668 <HandleMessage>
 822:	e3 cf       	rjmp	.-58     	; 0x7ea <SetInputOutput+0x130>
 824:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <terminalRefreshCounter.1887>
 828:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <terminalRefreshCounter.1887+0x1>
 82c:	9c 01       	movw	r18, r24
 82e:	2f 5f       	subi	r18, 0xFF	; 255
 830:	3f 4f       	sbci	r19, 0xFF	; 255
 832:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <terminalRefreshCounter.1887+0x1>
 836:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <terminalRefreshCounter.1887>
 83a:	8f 3f       	cpi	r24, 0xFF	; 255
 83c:	9f 40       	sbci	r25, 0x0F	; 15
 83e:	c9 f4       	brne	.+50     	; 0x872 <__stack+0x13>
 840:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <EnableStatusUpdate>
 844:	88 23       	and	r24, r24
 846:	a9 f0       	breq	.+42     	; 0x872 <__stack+0x13>
 848:	84 e0       	ldi	r24, 0x04	; 4
 84a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 84e:	86 e0       	ldi	r24, 0x06	; 6
 850:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 854:	85 ea       	ldi	r24, 0xA5	; 165
 856:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 85a:	8a e5       	ldi	r24, 0x5A	; 90
 85c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 860:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SystemState>
 864:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 868:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <OpenDoors>
 86c:	cf 91       	pop	r28
 86e:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <Usart_PutChar>
 872:	cf 91       	pop	r28
 874:	08 95       	ret

00000876 <InitializeStart>:
 876:	8a ec       	ldi	r24, 0xCA	; 202
 878:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 87c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <liftPosDisplay_On>
 880:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <buttonLiftLed_on>
 884:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <liftDisplay7Seg_On>
 888:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <buttonFloorLed_On>
 88c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <doorframe>
 890:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <liftDoorState+0x1>
 894:	80 e2       	ldi	r24, 0x20	; 32
 896:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <liftDoorState>
 89a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <liftDoorState+0x3>
 89e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <liftDoorState+0x2>
 8a2:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <liftDoorState+0x5>
 8a6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <liftDoorState+0x4>
 8aa:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <liftDoorState+0x7>
 8ae:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <liftDoorState+0x6>
 8b2:	8f e1       	ldi	r24, 0x1F	; 31
 8b4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 8b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Elevator+0x1>
 8bc:	0e 94 02 02 	call	0x404	; 0x404 <InitializeCounter>
 8c0:	20 e0       	ldi	r18, 0x00	; 0
 8c2:	40 e0       	ldi	r20, 0x00	; 0
 8c4:	61 ec       	ldi	r22, 0xC1	; 193
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
 8cc:	8e ef       	ldi	r24, 0xFE	; 254
 8ce:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Usart_PutChar>
 8d2:	0e 94 c7 01 	call	0x38e	; 0x38e <DispatchEvent>
 8d6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <SetInputOutput>
 8da:	fb cf       	rjmp	.-10     	; 0x8d2 <InitializeStart+0x5c>

000008dc <__vector_1>:
 8dc:	1f 92       	push	r1
 8de:	0f 92       	push	r0
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	0f 92       	push	r0
 8e4:	11 24       	eor	r1, r1
 8e6:	2f 93       	push	r18
 8e8:	3f 93       	push	r19
 8ea:	4f 93       	push	r20
 8ec:	5f 93       	push	r21
 8ee:	6f 93       	push	r22
 8f0:	7f 93       	push	r23
 8f2:	8f 93       	push	r24
 8f4:	9f 93       	push	r25
 8f6:	af 93       	push	r26
 8f8:	bf 93       	push	r27
 8fa:	ef 93       	push	r30
 8fc:	ff 93       	push	r31
 8fe:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ButtonState>
 902:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ButtonState+0x1>
 906:	91 60       	ori	r25, 0x01	; 1
 908:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ButtonState+0x1>
 90c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ButtonState>
 910:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <ButtonState>
 914:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <ButtonState+0x1>
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	69 ec       	ldi	r22, 0xC9	; 201
 91c:	80 e1       	ldi	r24, 0x10	; 16
 91e:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
 922:	ff 91       	pop	r31
 924:	ef 91       	pop	r30
 926:	bf 91       	pop	r27
 928:	af 91       	pop	r26
 92a:	9f 91       	pop	r25
 92c:	8f 91       	pop	r24
 92e:	7f 91       	pop	r23
 930:	6f 91       	pop	r22
 932:	5f 91       	pop	r21
 934:	4f 91       	pop	r20
 936:	3f 91       	pop	r19
 938:	2f 91       	pop	r18
 93a:	0f 90       	pop	r0
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	0f 90       	pop	r0
 940:	1f 90       	pop	r1
 942:	18 95       	reti

00000944 <__vector_13>:
 944:	1f 92       	push	r1
 946:	0f 92       	push	r0
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	0f 92       	push	r0
 94c:	11 24       	eor	r1, r1
 94e:	2f 93       	push	r18
 950:	3f 93       	push	r19
 952:	8f 93       	push	r24
 954:	9f 93       	push	r25
 956:	ef 93       	push	r30
 958:	ff 93       	push	r31
 95a:	5f 9b       	sbis	0x0b, 7	; 11
 95c:	1e c0       	rjmp	.+60     	; 0x99a <__vector_13+0x56>
 95e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 962:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <USART_rxBufferOut>
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	01 96       	adiw	r24, 0x01	; 1
 96a:	8f 71       	andi	r24, 0x1F	; 31
 96c:	99 27       	eor	r25, r25
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	82 17       	cp	r24, r18
 972:	93 07       	cpc	r25, r19
 974:	89 f0       	breq	.+34     	; 0x998 <__vector_13+0x54>
 976:	8c b1       	in	r24, 0x0c	; 12
 978:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <USART_rxBufferIn>
 97c:	91 e0       	ldi	r25, 0x01	; 1
 97e:	9e 0f       	add	r25, r30
 980:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <USART_rxBufferIn>
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	ec 5a       	subi	r30, 0xAC	; 172
 988:	fe 4f       	sbci	r31, 0xFE	; 254
 98a:	80 83       	st	Z, r24
 98c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USART_rxBufferIn>
 990:	8f 71       	andi	r24, 0x1F	; 31
 992:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <USART_rxBufferIn>
 996:	e1 cf       	rjmp	.-62     	; 0x95a <__vector_13+0x16>
 998:	57 98       	cbi	0x0a, 7	; 10
 99a:	ff 91       	pop	r31
 99c:	ef 91       	pop	r30
 99e:	9f 91       	pop	r25
 9a0:	8f 91       	pop	r24
 9a2:	3f 91       	pop	r19
 9a4:	2f 91       	pop	r18
 9a6:	0f 90       	pop	r0
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	0f 90       	pop	r0
 9ac:	1f 90       	pop	r1
 9ae:	18 95       	reti

000009b0 <__vector_7>:
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	2f 93       	push	r18
 9bc:	3f 93       	push	r19
 9be:	4f 93       	push	r20
 9c0:	5f 93       	push	r21
 9c2:	6f 93       	push	r22
 9c4:	7f 93       	push	r23
 9c6:	8f 93       	push	r24
 9c8:	9f 93       	push	r25
 9ca:	af 93       	push	r26
 9cc:	bf 93       	push	r27
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
 9d2:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ElevatorTick.1962>
 9d6:	8f 5f       	subi	r24, 0xFF	; 255
 9d8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <ElevatorTick.1962>
 9dc:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <__data_end>
 9e6:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <Elevator+0x2>
 9ea:	0e 94 c1 05 	call	0xb82	; 0xb82 <__udivmodqi4>
 9ee:	91 11       	cpse	r25, r1
 9f0:	14 c0       	rjmp	.+40     	; 0xa1a <__vector_7+0x6a>
 9f2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Elevator>
 9f6:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <Elevator+0x1>
 9fa:	96 17       	cp	r25, r22
 9fc:	61 f0       	breq	.+24     	; 0xa16 <__vector_7+0x66>
 9fe:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Elevator+0x4>
 a02:	89 0f       	add	r24, r25
 a04:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Elevator>
 a08:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Elevator+0x5>
 a0c:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Elevator+0x6>
 a10:	30 97       	sbiw	r30, 0x00	; 0
 a12:	09 f0       	breq	.+2      	; 0xa16 <__vector_7+0x66>
 a14:	09 95       	icall
 a16:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <ElevatorTick.1962>
 a1a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 a1e:	6c e0       	ldi	r22, 0x0C	; 12
 a20:	0e 94 c1 05 	call	0xb82	; 0xb82 <__udivmodqi4>
 a24:	91 11       	cpse	r25, r1
 a26:	04 c0       	rjmp	.+8      	; 0xa30 <__vector_7+0x80>
 a28:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
 a2c:	0e 94 aa 02 	call	0x554	; 0x554 <MakeDoorStates>
 a30:	ff 91       	pop	r31
 a32:	ef 91       	pop	r30
 a34:	bf 91       	pop	r27
 a36:	af 91       	pop	r26
 a38:	9f 91       	pop	r25
 a3a:	8f 91       	pop	r24
 a3c:	7f 91       	pop	r23
 a3e:	6f 91       	pop	r22
 a40:	5f 91       	pop	r21
 a42:	4f 91       	pop	r20
 a44:	3f 91       	pop	r19
 a46:	2f 91       	pop	r18
 a48:	0f 90       	pop	r0
 a4a:	0f be       	out	0x3f, r0	; 63
 a4c:	0f 90       	pop	r0
 a4e:	1f 90       	pop	r1
 a50:	18 95       	reti

00000a52 <StartTimer>:
 a52:	ff 92       	push	r15
 a54:	0f 93       	push	r16
 a56:	1f 93       	push	r17
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 a60:	2f 2d       	mov	r18, r15
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	c0 e0       	ldi	r28, 0x00	; 0
 a66:	d0 e0       	ldi	r29, 0x00	; 0
 a68:	a9 01       	movw	r20, r18
 a6a:	0c 2e       	mov	r0, r28
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <StartTimer+0x20>
 a6e:	55 95       	asr	r21
 a70:	47 95       	ror	r20
 a72:	0a 94       	dec	r0
 a74:	e2 f7       	brpl	.-8      	; 0xa6e <StartTimer+0x1c>
 a76:	40 fd       	sbrc	r20, 0
 a78:	18 c0       	rjmp	.+48     	; 0xaaa <StartTimer+0x58>
 a7a:	8c 01       	movw	r16, r24
 a7c:	0e 94 92 01 	call	0x324	; 0x324 <EnterAtomic>
 a80:	21 e0       	ldi	r18, 0x01	; 1
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	0c 2e       	mov	r0, r28
 a86:	01 c0       	rjmp	.+2      	; 0xa8a <StartTimer+0x38>
 a88:	22 0f       	add	r18, r18
 a8a:	0a 94       	dec	r0
 a8c:	ea f7       	brpl	.-6      	; 0xa88 <StartTimer+0x36>
 a8e:	2f 29       	or	r18, r15
 a90:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <UsedTimers>
 a94:	fe 01       	movw	r30, r28
 a96:	ee 0f       	add	r30, r30
 a98:	ff 1f       	adc	r31, r31
 a9a:	ef 5b       	subi	r30, 0xBF	; 191
 a9c:	fe 4f       	sbci	r31, 0xFE	; 254
 a9e:	11 83       	std	Z+1, r17	; 0x01
 aa0:	00 83       	st	Z, r16
 aa2:	0e 94 99 01 	call	0x332	; 0x332 <LeaveAtomic>
 aa6:	8c 2f       	mov	r24, r28
 aa8:	05 c0       	rjmp	.+10     	; 0xab4 <StartTimer+0x62>
 aaa:	21 96       	adiw	r28, 0x01	; 1
 aac:	c8 30       	cpi	r28, 0x08	; 8
 aae:	d1 05       	cpc	r29, r1
 ab0:	d9 f6       	brne	.-74     	; 0xa68 <StartTimer+0x16>
 ab2:	8f ef       	ldi	r24, 0xFF	; 255
 ab4:	df 91       	pop	r29
 ab6:	cf 91       	pop	r28
 ab8:	1f 91       	pop	r17
 aba:	0f 91       	pop	r16
 abc:	ff 90       	pop	r15
 abe:	08 95       	ret

00000ac0 <__vector_10>:
 ac0:	1f 92       	push	r1
 ac2:	0f 92       	push	r0
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	0f 92       	push	r0
 ac8:	11 24       	eor	r1, r1
 aca:	cf 92       	push	r12
 acc:	df 92       	push	r13
 ace:	ff 92       	push	r15
 ad0:	0f 93       	push	r16
 ad2:	1f 93       	push	r17
 ad4:	2f 93       	push	r18
 ad6:	3f 93       	push	r19
 ad8:	4f 93       	push	r20
 ada:	5f 93       	push	r21
 adc:	6f 93       	push	r22
 ade:	7f 93       	push	r23
 ae0:	8f 93       	push	r24
 ae2:	9f 93       	push	r25
 ae4:	af 93       	push	r26
 ae6:	bf 93       	push	r27
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	ef 93       	push	r30
 aee:	ff 93       	push	r31
 af0:	01 e4       	ldi	r16, 0x41	; 65
 af2:	11 e0       	ldi	r17, 0x01	; 1
 af4:	c0 e0       	ldi	r28, 0x00	; 0
 af6:	d0 e0       	ldi	r29, 0x00	; 0
 af8:	cc 24       	eor	r12, r12
 afa:	c3 94       	inc	r12
 afc:	d1 2c       	mov	r13, r1
 afe:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <UsedTimers>
 b02:	8f 2d       	mov	r24, r15
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0c 2e       	mov	r0, r28
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <__vector_10+0x4e>
 b0a:	95 95       	asr	r25
 b0c:	87 95       	ror	r24
 b0e:	0a 94       	dec	r0
 b10:	e2 f7       	brpl	.-8      	; 0xb0a <__vector_10+0x4a>
 b12:	80 ff       	sbrs	r24, 0
 b14:	18 c0       	rjmp	.+48     	; 0xb46 <__vector_10+0x86>
 b16:	f8 01       	movw	r30, r16
 b18:	80 81       	ld	r24, Z
 b1a:	91 81       	ldd	r25, Z+1	; 0x01
 b1c:	01 97       	sbiw	r24, 0x01	; 1
 b1e:	91 83       	std	Z+1, r25	; 0x01
 b20:	80 83       	st	Z, r24
 b22:	89 2b       	or	r24, r25
 b24:	81 f4       	brne	.+32     	; 0xb46 <__vector_10+0x86>
 b26:	20 e0       	ldi	r18, 0x00	; 0
 b28:	40 e0       	ldi	r20, 0x00	; 0
 b2a:	68 ec       	ldi	r22, 0xC8	; 200
 b2c:	81 e0       	ldi	r24, 0x01	; 1
 b2e:	0e 94 6f 02 	call	0x4de	; 0x4de <SendEvent>
 b32:	c6 01       	movw	r24, r12
 b34:	0c 2e       	mov	r0, r28
 b36:	01 c0       	rjmp	.+2      	; 0xb3a <__vector_10+0x7a>
 b38:	88 0f       	add	r24, r24
 b3a:	0a 94       	dec	r0
 b3c:	ea f7       	brpl	.-6      	; 0xb38 <__vector_10+0x78>
 b3e:	80 95       	com	r24
 b40:	f8 22       	and	r15, r24
 b42:	f0 92 51 01 	sts	0x0151, r15	; 0x800151 <UsedTimers>
 b46:	21 96       	adiw	r28, 0x01	; 1
 b48:	0e 5f       	subi	r16, 0xFE	; 254
 b4a:	1f 4f       	sbci	r17, 0xFF	; 255
 b4c:	c8 30       	cpi	r28, 0x08	; 8
 b4e:	d1 05       	cpc	r29, r1
 b50:	b1 f6       	brne	.-84     	; 0xafe <__vector_10+0x3e>
 b52:	ff 91       	pop	r31
 b54:	ef 91       	pop	r30
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	bf 91       	pop	r27
 b5c:	af 91       	pop	r26
 b5e:	9f 91       	pop	r25
 b60:	8f 91       	pop	r24
 b62:	7f 91       	pop	r23
 b64:	6f 91       	pop	r22
 b66:	5f 91       	pop	r21
 b68:	4f 91       	pop	r20
 b6a:	3f 91       	pop	r19
 b6c:	2f 91       	pop	r18
 b6e:	1f 91       	pop	r17
 b70:	0f 91       	pop	r16
 b72:	ff 90       	pop	r15
 b74:	df 90       	pop	r13
 b76:	cf 90       	pop	r12
 b78:	0f 90       	pop	r0
 b7a:	0f be       	out	0x3f, r0	; 63
 b7c:	0f 90       	pop	r0
 b7e:	1f 90       	pop	r1
 b80:	18 95       	reti

00000b82 <__udivmodqi4>:
 b82:	99 1b       	sub	r25, r25
 b84:	79 e0       	ldi	r23, 0x09	; 9
 b86:	04 c0       	rjmp	.+8      	; 0xb90 <__udivmodqi4_ep>

00000b88 <__udivmodqi4_loop>:
 b88:	99 1f       	adc	r25, r25
 b8a:	96 17       	cp	r25, r22
 b8c:	08 f0       	brcs	.+2      	; 0xb90 <__udivmodqi4_ep>
 b8e:	96 1b       	sub	r25, r22

00000b90 <__udivmodqi4_ep>:
 b90:	88 1f       	adc	r24, r24
 b92:	7a 95       	dec	r23
 b94:	c9 f7       	brne	.-14     	; 0xb88 <__udivmodqi4_loop>
 b96:	80 95       	com	r24
 b98:	08 95       	ret

00000b9a <_exit>:
 b9a:	f8 94       	cli

00000b9c <__stop_program>:
 b9c:	ff cf       	rjmp	.-2      	; 0xb9c <__stop_program>
