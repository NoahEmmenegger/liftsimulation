
LiftSimulation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000087c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000087c  00000910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  0080007e  0080007e  0000092e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001924  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099b  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8a  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00003870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da4  00000000  00000000  00003cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc9  00000000  00000000  00004a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005a2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 3c 04 	jmp	0x878	; 0x878 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int FindBit(int num);


int main(void)
{
   InitializePorts();
  92:	0e 94 03 01 	call	0x206	; 0x206 <InitializePorts>
   Usart_Init();
  96:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Usart_Init>
   RegisterTestHandler(TestFunction );
  9a:	8f e7       	ldi	r24, 0x7F	; 127
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <RegisterTestHandler>
   InitializeStart();
  a2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <InitializeStart>
   
  
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret

000000ac <FindBit>:
int FindBit(int num)
{
	int counter = 0;
	
	//if number is uneven, then last bit is 1. Therefore return 0
	while(num % 2 == 0)
  ac:	80 fd       	sbrc	r24, 0
  ae:	09 c0       	rjmp	.+18     	; 0xc2 <FindBit+0x16>
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
	{
		num = num >> 1;
  b4:	95 95       	asr	r25
  b6:	87 95       	ror	r24
		counter++;
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
int FindBit(int num)
{
	int counter = 0;
	
	//if number is uneven, then last bit is 1. Therefore return 0
	while(num % 2 == 0)
  bc:	80 ff       	sbrs	r24, 0
  be:	fa cf       	rjmp	.-12     	; 0xb4 <FindBit+0x8>
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <FindBit+0x1a>
	}
}

int FindBit(int num)
{
	int counter = 0;
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
	{
		num = num >> 1;
		counter++;
	}
	return counter;
}
  c6:	c9 01       	movw	r24, r18
  c8:	08 95       	ret

000000ca <WriteString>:

void WriteString(char* ch)
{
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
	 uint8_t nrOfBytes = strlen(ch);
  d0:	fc 01       	movw	r30, r24
  d2:	01 90       	ld	r0, Z+
  d4:	00 20       	and	r0, r0
  d6:	e9 f7       	brne	.-6      	; 0xd2 <WriteString+0x8>
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	ce 2f       	mov	r28, r30
  dc:	c8 1b       	sub	r28, r24
	
	for (;nrOfBytes > 0; nrOfBytes--)
  de:	41 f0       	breq	.+16     	; 0xf0 <WriteString+0x26>
  e0:	8c 01       	movw	r16, r24
	{
		Usart_PutChar(*ch++);
  e2:	f8 01       	movw	r30, r16
  e4:	81 91       	ld	r24, Z+
  e6:	8f 01       	movw	r16, r30
  e8:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>

void WriteString(char* ch)
{
	 uint8_t nrOfBytes = strlen(ch);
	
	for (;nrOfBytes > 0; nrOfBytes--)
  ec:	c1 50       	subi	r28, 0x01	; 1
  ee:	c9 f7       	brne	.-14     	; 0xe2 <WriteString+0x18>
	{
		Usart_PutChar(*ch++);
	}
	
	Usart_PutChar('\n');
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
}
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <TestFunction>:
   
  
}

void TestFunction(uint8_t* data, uint8_t nrOfBytes)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
	if (data[0] == 1)
 104:	88 81       	ld	r24, Y
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	21 f4       	brne	.+8      	; 0x112 <TestFunction+0x14>
	{
		WriteString("Hello-World");
 10a:	81 e7       	ldi	r24, 0x71	; 113
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 65 00 	call	0xca	; 0xca <WriteString>
	}
	
	if (data[0] == 2)
 112:	88 81       	ld	r24, Y
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	31 f4       	brne	.+12     	; 0x124 <TestFunction+0x26>
	{
		WriteString(FindBit(3));
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 56 00 	call	0xac	; 0xac <FindBit>
 120:	0e 94 65 00 	call	0xca	; 0xca <WriteString>
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <EnterAtomic>:
 12a:	f8 94       	cli
 12c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <enterAtomicNesting>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <enterAtomicNesting>
 136:	08 95       	ret

00000138 <LeaveAtomic>:
 138:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <enterAtomicNesting>
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <enterAtomicNesting>
 142:	81 11       	cpse	r24, r1
 144:	01 c0       	rjmp	.+2      	; 0x148 <LeaveAtomic+0x10>
 146:	78 94       	sei
 148:	08 95       	ret

0000014a <DispatchEvent>:
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	0e 94 95 00 	call	0x12a	; 0x12a <EnterAtomic>
 156:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <msgQ_out>
 15a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <msgQ_in>
 15e:	98 17       	cp	r25, r24
 160:	59 f0       	breq	.+22     	; 0x178 <DispatchEvent+0x2e>
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	98 9f       	mul	r25, r24
 166:	e0 01       	movw	r28, r0
 168:	11 24       	eor	r1, r1
 16a:	c7 56       	subi	r28, 0x67	; 103
 16c:	df 4f       	sbci	r29, 0xFF	; 255
 16e:	9f 5f       	subi	r25, 0xFF	; 255
 170:	9f 71       	andi	r25, 0x1F	; 31
 172:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <msgQ_out>
 176:	02 c0       	rjmp	.+4      	; 0x17c <DispatchEvent+0x32>
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	0e 94 9c 00 	call	0x138	; 0x138 <LeaveAtomic>
 180:	20 97       	sbiw	r28, 0x00	; 0
 182:	c9 f0       	breq	.+50     	; 0x1b6 <DispatchEvent+0x6c>
 184:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 188:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	00 36       	cpi	r16, 0x60	; 96
 190:	1f 07       	cpc	r17, r31
 192:	89 f0       	breq	.+34     	; 0x1b6 <DispatchEvent+0x6c>
 194:	d8 01       	movw	r26, r16
 196:	12 96       	adiw	r26, 0x02	; 2
 198:	9c 91       	ld	r25, X
 19a:	12 97       	sbiw	r26, 0x02	; 2
 19c:	88 81       	ld	r24, Y
 19e:	89 23       	and	r24, r25
 1a0:	31 f0       	breq	.+12     	; 0x1ae <DispatchEvent+0x64>
 1a2:	13 96       	adiw	r26, 0x03	; 3
 1a4:	ed 91       	ld	r30, X+
 1a6:	fc 91       	ld	r31, X
 1a8:	14 97       	sbiw	r26, 0x04	; 4
 1aa:	ce 01       	movw	r24, r28
 1ac:	09 95       	icall
 1ae:	f8 01       	movw	r30, r16
 1b0:	00 81       	ld	r16, Z
 1b2:	11 81       	ldd	r17, Z+1	; 0x01
 1b4:	eb cf       	rjmp	.-42     	; 0x18c <DispatchEvent+0x42>
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <InitializeCounter>:
 1c0:	12 be       	out	0x32, r1	; 50
 1c2:	8b e0       	ldi	r24, 0x0B	; 11
 1c4:	83 bf       	out	0x33, r24	; 51
 1c6:	8d e7       	ldi	r24, 0x7D	; 125
 1c8:	8c bf       	out	0x3c, r24	; 60
 1ca:	89 b7       	in	r24, 0x39	; 57
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	89 bf       	out	0x39, r24	; 57
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	9b bd       	out	0x2b, r25	; 43
 1d6:	8a bd       	out	0x2a, r24	; 42
 1d8:	1d bc       	out	0x2d, r1	; 45
 1da:	1c bc       	out	0x2c, r1	; 44
 1dc:	1f bc       	out	0x2f, r1	; 47
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	8e bd       	out	0x2e, r24	; 46
 1e2:	89 b7       	in	r24, 0x39	; 57
 1e4:	80 61       	ori	r24, 0x10	; 16
 1e6:	89 bf       	out	0x39, r24	; 57
 1e8:	08 95       	ret

000001ea <RegisterTestHandler>:
 1ea:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_testHandler+0x1>
 1ee:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_testHandler>
 1f2:	08 95       	ret

000001f4 <Usart_Init>:
 1f4:	10 bc       	out	0x20, r1	; 32
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	89 b9       	out	0x09, r24	; 9
 1fa:	86 e8       	ldi	r24, 0x86	; 134
 1fc:	80 bd       	out	0x20, r24	; 32
 1fe:	88 e9       	ldi	r24, 0x98	; 152
 200:	8a b9       	out	0x0a, r24	; 10
 202:	78 94       	sei
 204:	08 95       	ret

00000206 <InitializePorts>:
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	87 bb       	out	0x17, r24	; 23
 20a:	84 bb       	out	0x14, r24	; 20
 20c:	8a bb       	out	0x1a, r24	; 26
 20e:	11 ba       	out	0x11, r1	; 17
 210:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Usart_Init>
 214:	85 b7       	in	r24, 0x35	; 53
 216:	83 60       	ori	r24, 0x03	; 3
 218:	85 bf       	out	0x35, r24	; 53
 21a:	8b b7       	in	r24, 0x3b	; 59
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	8b bf       	out	0x3b, r24	; 59
 220:	08 95       	ret

00000222 <Usart_PutChar>:
 222:	8c b9       	out	0x0c, r24	; 12
 224:	5d 9b       	sbis	0x0b, 5	; 11
 226:	fe cf       	rjmp	.-4      	; 0x224 <Usart_PutChar+0x2>
 228:	08 95       	ret

0000022a <SendEvent>:
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	c8 2f       	mov	r28, r24
 234:	06 2f       	mov	r16, r22
 236:	d4 2f       	mov	r29, r20
 238:	12 2f       	mov	r17, r18
 23a:	0e 94 95 00 	call	0x12a	; 0x12a <EnterAtomic>
 23e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <msgQ_in>
 242:	e8 2f       	mov	r30, r24
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	af 01       	movw	r20, r30
 248:	4f 5f       	subi	r20, 0xFF	; 255
 24a:	5f 4f       	sbci	r21, 0xFF	; 255
 24c:	4f 71       	andi	r20, 0x1F	; 31
 24e:	55 27       	eor	r21, r21
 250:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <msgQ_out>
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	42 17       	cp	r20, r18
 258:	53 07       	cpc	r21, r19
 25a:	71 f4       	brne	.+28     	; 0x278 <SendEvent+0x4e>
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 26e:	8e ed       	ldi	r24, 0xDE	; 222
 270:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 274:	8d ea       	ldi	r24, 0xAD	; 173
 276:	f9 cf       	rjmp	.-14     	; 0x26a <SendEvent+0x40>
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	e7 56       	subi	r30, 0x67	; 103
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	01 83       	std	Z+1, r16	; 0x01
 286:	13 83       	std	Z+3, r17	; 0x03
 288:	d2 83       	std	Z+2, r29	; 0x02
 28a:	c0 83       	st	Z, r28
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	8f 71       	andi	r24, 0x1F	; 31
 290:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <msgQ_in>
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	0c 94 9c 00 	jmp	0x138	; 0x138 <LeaveAtomic>

000002a0 <MakeDoorStates>:
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ce e5       	ldi	r28, 0x5E	; 94
 2b0:	d1 e0       	ldi	r29, 0x01	; 1
 2b2:	00 e0       	ldi	r16, 0x00	; 0
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	ee 24       	eor	r14, r14
 2b8:	e3 94       	inc	r14
 2ba:	f1 2c       	mov	r15, r1
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	81 11       	cpse	r24, r1
 2c0:	24 c0       	rjmp	.+72     	; 0x30a <MakeDoorStates+0x6a>
 2c2:	48 81       	ld	r20, Y
 2c4:	40 ff       	sbrs	r20, 0
 2c6:	23 c0       	rjmp	.+70     	; 0x30e <MakeDoorStates+0x6e>
 2c8:	4e 7f       	andi	r20, 0xFE	; 254
 2ca:	48 83       	st	Y, r20
 2cc:	20 2f       	mov	r18, r16
 2ce:	65 ec       	ldi	r22, 0xC5	; 197
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	0e 94 15 01 	call	0x22a	; 0x22a <SendEvent>
 2d6:	88 81       	ld	r24, Y
 2d8:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <OpenDoors>
 2dc:	84 ff       	sbrs	r24, 4
 2de:	0a c0       	rjmp	.+20     	; 0x2f4 <MakeDoorStates+0x54>
 2e0:	97 01       	movw	r18, r14
 2e2:	00 2e       	mov	r0, r16
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <MakeDoorStates+0x48>
 2e6:	22 0f       	add	r18, r18
 2e8:	0a 94       	dec	r0
 2ea:	ea f7       	brpl	.-6      	; 0x2e6 <MakeDoorStates+0x46>
 2ec:	24 2b       	or	r18, r20
 2ee:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <OpenDoors>
 2f2:	0d c0       	rjmp	.+26     	; 0x30e <MakeDoorStates+0x6e>
 2f4:	c7 01       	movw	r24, r14
 2f6:	00 2e       	mov	r0, r16
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <MakeDoorStates+0x5c>
 2fa:	88 0f       	add	r24, r24
 2fc:	0a 94       	dec	r0
 2fe:	ea f7       	brpl	.-6      	; 0x2fa <MakeDoorStates+0x5a>
 300:	80 95       	com	r24
 302:	84 23       	and	r24, r20
 304:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <OpenDoors>
 308:	02 c0       	rjmp	.+4      	; 0x30e <MakeDoorStates+0x6e>
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	89 83       	std	Y+1, r24	; 0x01
 30e:	0f 5f       	subi	r16, 0xFF	; 255
 310:	1f 4f       	sbci	r17, 0xFF	; 255
 312:	22 96       	adiw	r28, 0x02	; 2
 314:	04 30       	cpi	r16, 0x04	; 4
 316:	11 05       	cpc	r17, r1
 318:	89 f6       	brne	.-94     	; 0x2bc <MakeDoorStates+0x1c>
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	08 95       	ret

0000032a <ProcessMessage>:
 32a:	db 01       	movw	r26, r22
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	b1 f5       	brne	.+108    	; 0x39c <ProcessMessage+0x72>
 330:	8c 91       	ld	r24, X
 332:	98 2f       	mov	r25, r24
 334:	90 72       	andi	r25, 0x20	; 32
 336:	28 2f       	mov	r18, r24
 338:	20 76       	andi	r18, 0x60	; 96
 33a:	d9 f1       	breq	.+118    	; 0x3b2 <ProcessMessage+0x88>
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	38 2f       	mov	r19, r24
 340:	30 71       	andi	r19, 0x10	; 16
 342:	84 ff       	sbrs	r24, 4
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	99 23       	and	r25, r25
 348:	11 f0       	breq	.+4      	; 0x34e <ProcessMessage+0x24>
 34a:	94 e0       	ldi	r25, 0x04	; 4
 34c:	01 c0       	rjmp	.+2      	; 0x350 <ProcessMessage+0x26>
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	8f 70       	andi	r24, 0x0F	; 15
 352:	89 0f       	add	r24, r25
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <ProcessMessage+0x34>
 35a:	44 0f       	add	r20, r20
 35c:	55 1f       	adc	r21, r21
 35e:	8a 95       	dec	r24
 360:	e2 f7       	brpl	.-8      	; 0x35a <ProcessMessage+0x30>
 362:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 366:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 36a:	ba 01       	movw	r22, r20
 36c:	60 95       	com	r22
 36e:	70 95       	com	r23
 370:	86 23       	and	r24, r22
 372:	97 23       	and	r25, r23
 374:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 378:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 37c:	33 23       	and	r19, r19
 37e:	51 f0       	breq	.+20     	; 0x394 <ProcessMessage+0x6a>
 380:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 384:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 388:	84 2b       	or	r24, r20
 38a:	95 2b       	or	r25, r21
 38c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 390:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 394:	67 ec       	ldi	r22, 0xC7	; 199
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0c 94 15 01 	jmp	0x22a	; 0x22a <SendEvent>
 39c:	83 30       	cpi	r24, 0x03	; 3
 39e:	49 f4       	brne	.+18     	; 0x3b2 <ProcessMessage+0x88>
 3a0:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <_testHandler>
 3a4:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <_testHandler+0x1>
 3a8:	30 97       	sbiw	r30, 0x00	; 0
 3aa:	19 f0       	breq	.+6      	; 0x3b2 <ProcessMessage+0x88>
 3ac:	64 2f       	mov	r22, r20
 3ae:	cd 01       	movw	r24, r26
 3b0:	09 94       	ijmp
 3b2:	08 95       	ret

000003b4 <HandleMessage>:
 3b4:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <msgType.1871>
 3b8:	91 11       	cpse	r25, r1
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <HandleMessage+0x12>
 3bc:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <msgType.1871>
 3c0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <msgLen.1872>
 3c4:	08 95       	ret
 3c6:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <msgLen.1872>
 3ca:	41 11       	cpse	r20, r1
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <HandleMessage+0x22>
 3ce:	82 50       	subi	r24, 0x02	; 2
 3d0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <msgLen.1872>
 3d4:	15 c0       	rjmp	.+42     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d6:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <bufferIndex.1870>
 3da:	e4 17       	cp	r30, r20
 3dc:	98 f4       	brcc	.+38     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	2e 0f       	add	r18, r30
 3e2:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <bufferIndex.1870>
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ea 57       	subi	r30, 0x7A	; 122
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	80 83       	st	Z, r24
 3ee:	42 13       	cpse	r20, r18
 3f0:	09 c0       	rjmp	.+18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f2:	66 e8       	ldi	r22, 0x86	; 134
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	89 2f       	mov	r24, r25
 3f8:	0e 94 95 01 	call	0x32a	; 0x32a <ProcessMessage>
 3fc:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <msgType.1871>
 400:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <bufferIndex.1870>
 404:	08 95       	ret

00000406 <SetInputOutput>:
 406:	cf 93       	push	r28
 408:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <outputRefreshCounter.1884>
 40c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <outputRefreshCounter.1884+0x1>
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <outputRefreshCounter.1884+0x1>
 416:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <outputRefreshCounter.1884>
 41a:	83 70       	andi	r24, 0x03	; 3
 41c:	99 27       	eor	r25, r25
 41e:	89 2b       	or	r24, r25
 420:	21 f5       	brne	.+72     	; 0x46a <SetInputOutput+0x64>
 422:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <doorRefreshCounter.1885>
 426:	8f 5f       	subi	r24, 0xFF	; 255
 428:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <doorRefreshCounter.1885>
 42c:	83 70       	andi	r24, 0x03	; 3
 42e:	a8 2f       	mov	r26, r24
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	aa 0f       	add	r26, r26
 434:	bb 1f       	adc	r27, r27
 436:	a2 5a       	subi	r26, 0xA2	; 162
 438:	be 4f       	sbci	r27, 0xFE	; 254
 43a:	11 96       	adiw	r26, 0x01	; 1
 43c:	ec 91       	ld	r30, X
 43e:	11 97       	sbiw	r26, 0x01	; 1
 440:	9c 91       	ld	r25, X
 442:	94 ff       	sbrs	r25, 4
 444:	03 c0       	rjmp	.+6      	; 0x44c <SetInputOutput+0x46>
 446:	94 e0       	ldi	r25, 0x04	; 4
 448:	9e 1b       	sub	r25, r30
 44a:	e9 2f       	mov	r30, r25
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	e4 59       	subi	r30, 0x94	; 148
 450:	ff 4f       	sbci	r31, 0xFF	; 255
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	a9 01       	movw	r20, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <SetInputOutput+0x58>
 45a:	44 0f       	add	r20, r20
 45c:	55 1f       	adc	r21, r21
 45e:	8a 95       	dec	r24
 460:	e2 f7       	brpl	.-8      	; 0x45a <SetInputOutput+0x54>
 462:	ca 01       	movw	r24, r20
 464:	90 81       	ld	r25, Z
 466:	89 2b       	or	r24, r25
 468:	85 bb       	out	0x15, r24	; 21
 46a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <buttonRefreshCounter.1886>
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <buttonRefreshCounter.1886>
 474:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <displayCache>
 478:	22 23       	and	r18, r18
 47a:	01 f1       	breq	.+64     	; 0x4bc <SetInputOutput+0xb6>
 47c:	83 70       	andi	r24, 0x03	; 3
 47e:	62 2f       	mov	r22, r18
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	40 e1       	ldi	r20, 0x10	; 16
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	08 2e       	mov	r0, r24
 488:	02 c0       	rjmp	.+4      	; 0x48e <SetInputOutput+0x88>
 48a:	44 0f       	add	r20, r20
 48c:	55 1f       	adc	r21, r21
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <SetInputOutput+0x84>
 492:	46 23       	and	r20, r22
 494:	57 23       	and	r21, r23
 496:	45 2b       	or	r20, r21
 498:	11 f0       	breq	.+4      	; 0x49e <SetInputOutput+0x98>
 49a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <buttonLiftLed>
 49e:	08 2e       	mov	r0, r24
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <SetInputOutput+0xa0>
 4a2:	75 95       	asr	r23
 4a4:	67 95       	ror	r22
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <SetInputOutput+0x9c>
 4aa:	60 fd       	sbrc	r22, 0
 4ac:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <buttonFloorLed>
 4b0:	82 2f       	mov	r24, r18
 4b2:	80 7f       	andi	r24, 0xF0	; 240
 4b4:	19 f0       	breq	.+6      	; 0x4bc <SetInputOutput+0xb6>
 4b6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <buttonLiftLed_on>
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <SetInputOutput+0xb8>
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	2f 70       	andi	r18, 0x0F	; 15
 4c0:	19 f0       	breq	.+6      	; 0x4c8 <SetInputOutput+0xc2>
 4c2:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <buttonFloorLed_On>
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <SetInputOutput+0xc4>
 4c8:	21 e0       	ldi	r18, 0x01	; 1
 4ca:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <liftPosDisplay_On>
 4ce:	81 11       	cpse	r24, r1
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <SetInputOutput+0xd4>
 4d2:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Elevator>
 4d6:	3f 73       	andi	r19, 0x3F	; 63
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <SetInputOutput+0xd6>
 4da:	3f e3       	ldi	r19, 0x3F	; 63
 4dc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <liftDisplay7Seg_On>
 4e0:	81 11       	cpse	r24, r1
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <SetInputOutput+0xe4>
 4e4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <liftDisplay7Seg>
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <SetInputOutput+0xe6>
 4ea:	87 e0       	ldi	r24, 0x07	; 7
 4ec:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <floorDisplayPort>
 4f0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <doorframe>
 4f4:	60 e4       	ldi	r22, 0x40	; 64
 4f6:	86 9f       	mul	r24, r22
 4f8:	a0 01       	movw	r20, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	60 e8       	ldi	r22, 0x80	; 128
 4fe:	96 9f       	mul	r25, r22
 500:	c0 01       	movw	r24, r0
 502:	11 24       	eor	r1, r1
 504:	84 2b       	or	r24, r20
 506:	83 2b       	or	r24, r19
 508:	88 bb       	out	0x18, r24	; 24
 50a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <buttonLiftLed>
 50e:	98 e0       	ldi	r25, 0x08	; 8
 510:	89 9f       	mul	r24, r25
 512:	a0 01       	movw	r20, r0
 514:	11 24       	eor	r1, r1
 516:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <buttonFloorLed>
 51a:	30 e2       	ldi	r19, 0x20	; 32
 51c:	93 9f       	mul	r25, r19
 51e:	c0 01       	movw	r24, r0
 520:	11 24       	eor	r1, r1
 522:	84 2b       	or	r24, r20
 524:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <floorDisplayPort>
 528:	38 2b       	or	r19, r24
 52a:	40 e8       	ldi	r20, 0x80	; 128
 52c:	24 9f       	mul	r18, r20
 52e:	c0 01       	movw	r24, r0
 530:	11 24       	eor	r1, r1
 532:	83 2b       	or	r24, r19
 534:	8b bb       	out	0x1b, r24	; 27
 536:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <USART_rxBufferOut>
 53a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 53e:	98 17       	cp	r25, r24
 540:	b9 f0       	breq	.+46     	; 0x570 <SetInputOutput+0x16a>
 542:	0e 94 95 00 	call	0x12a	; 0x12a <EnterAtomic>
 546:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <USART_rxBufferOut>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	8e 0f       	add	r24, r30
 54e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <USART_rxBufferOut>
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	e2 5c       	subi	r30, 0xC2	; 194
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	c0 81       	ld	r28, Z
 55a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USART_rxBufferOut>
 55e:	8f 71       	andi	r24, 0x1F	; 31
 560:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <USART_rxBufferOut>
 564:	0e 94 9c 00 	call	0x138	; 0x138 <LeaveAtomic>
 568:	8c 2f       	mov	r24, r28
 56a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <HandleMessage>
 56e:	e3 cf       	rjmp	.-58     	; 0x536 <SetInputOutput+0x130>
 570:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <terminalRefreshCounter.1887>
 574:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <terminalRefreshCounter.1887+0x1>
 578:	9c 01       	movw	r18, r24
 57a:	2f 5f       	subi	r18, 0xFF	; 255
 57c:	3f 4f       	sbci	r19, 0xFF	; 255
 57e:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <terminalRefreshCounter.1887+0x1>
 582:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <terminalRefreshCounter.1887>
 586:	8f 3f       	cpi	r24, 0xFF	; 255
 588:	9f 40       	sbci	r25, 0x0F	; 15
 58a:	c9 f4       	brne	.+50     	; 0x5be <SetInputOutput+0x1b8>
 58c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <EnableStatusUpdate>
 590:	88 23       	and	r24, r24
 592:	a9 f0       	breq	.+42     	; 0x5be <SetInputOutput+0x1b8>
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 59a:	86 e0       	ldi	r24, 0x06	; 6
 59c:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 5a0:	85 ea       	ldi	r24, 0xA5	; 165
 5a2:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 5a6:	8a e5       	ldi	r24, 0x5A	; 90
 5a8:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 5ac:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <SystemState>
 5b0:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 5b4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <OpenDoors>
 5b8:	cf 91       	pop	r28
 5ba:	0c 94 11 01 	jmp	0x222	; 0x222 <Usart_PutChar>
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <InitializeStart>:
 5c2:	8a ec       	ldi	r24, 0xCA	; 202
 5c4:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 5c8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <liftPosDisplay_On>
 5cc:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <buttonLiftLed_on>
 5d0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <liftDisplay7Seg_On>
 5d4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <buttonFloorLed_On>
 5d8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <doorframe>
 5dc:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <liftDoorState+0x1>
 5e0:	80 e2       	ldi	r24, 0x20	; 32
 5e2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <liftDoorState>
 5e6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <liftDoorState+0x3>
 5ea:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <liftDoorState+0x2>
 5ee:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <liftDoorState+0x5>
 5f2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <liftDoorState+0x4>
 5f6:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <liftDoorState+0x7>
 5fa:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <liftDoorState+0x6>
 5fe:	8f e1       	ldi	r24, 0x1F	; 31
 600:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Elevator>
 604:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Elevator+0x1>
 608:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <InitializeCounter>
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	61 ec       	ldi	r22, 0xC1	; 193
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 15 01 	call	0x22a	; 0x22a <SendEvent>
 618:	8e ef       	ldi	r24, 0xFE	; 254
 61a:	0e 94 11 01 	call	0x222	; 0x222 <Usart_PutChar>
 61e:	0e 94 a5 00 	call	0x14a	; 0x14a <DispatchEvent>
 622:	0e 94 03 02 	call	0x406	; 0x406 <SetInputOutput>
 626:	fb cf       	rjmp	.-10     	; 0x61e <InitializeStart+0x5c>

00000628 <__vector_1>:
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	2f 93       	push	r18
 634:	3f 93       	push	r19
 636:	4f 93       	push	r20
 638:	5f 93       	push	r21
 63a:	6f 93       	push	r22
 63c:	7f 93       	push	r23
 63e:	8f 93       	push	r24
 640:	9f 93       	push	r25
 642:	af 93       	push	r26
 644:	bf 93       	push	r27
 646:	ef 93       	push	r30
 648:	ff 93       	push	r31
 64a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ButtonState>
 64e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ButtonState+0x1>
 652:	91 60       	ori	r25, 0x01	; 1
 654:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ButtonState+0x1>
 658:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ButtonState>
 65c:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <ButtonState>
 660:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <ButtonState+0x1>
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	69 ec       	ldi	r22, 0xC9	; 201
 668:	80 e1       	ldi	r24, 0x10	; 16
 66a:	0e 94 15 01 	call	0x22a	; 0x22a <SendEvent>
 66e:	ff 91       	pop	r31
 670:	ef 91       	pop	r30
 672:	bf 91       	pop	r27
 674:	af 91       	pop	r26
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	7f 91       	pop	r23
 67c:	6f 91       	pop	r22
 67e:	5f 91       	pop	r21
 680:	4f 91       	pop	r20
 682:	3f 91       	pop	r19
 684:	2f 91       	pop	r18
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_13>:
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	8f 93       	push	r24
 6a0:	9f 93       	push	r25
 6a2:	ef 93       	push	r30
 6a4:	ff 93       	push	r31
 6a6:	5f 9b       	sbis	0x0b, 7	; 11
 6a8:	1e c0       	rjmp	.+60     	; 0x6e6 <__vector_13+0x56>
 6aa:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 6ae:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <USART_rxBufferOut>
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	01 96       	adiw	r24, 0x01	; 1
 6b6:	8f 71       	andi	r24, 0x1F	; 31
 6b8:	99 27       	eor	r25, r25
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	82 17       	cp	r24, r18
 6be:	93 07       	cpc	r25, r19
 6c0:	89 f0       	breq	.+34     	; 0x6e4 <__vector_13+0x54>
 6c2:	8c b1       	in	r24, 0x0c	; 12
 6c4:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <USART_rxBufferIn>
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	9e 0f       	add	r25, r30
 6cc:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <USART_rxBufferIn>
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	e2 5c       	subi	r30, 0xC2	; 194
 6d4:	fe 4f       	sbci	r31, 0xFE	; 254
 6d6:	80 83       	st	Z, r24
 6d8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USART_rxBufferIn>
 6dc:	8f 71       	andi	r24, 0x1F	; 31
 6de:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <USART_rxBufferIn>
 6e2:	e1 cf       	rjmp	.-62     	; 0x6a6 <__vector_13+0x16>
 6e4:	57 98       	cbi	0x0a, 7	; 10
 6e6:	ff 91       	pop	r31
 6e8:	ef 91       	pop	r30
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	3f 91       	pop	r19
 6f0:	2f 91       	pop	r18
 6f2:	0f 90       	pop	r0
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	0f 90       	pop	r0
 6f8:	1f 90       	pop	r1
 6fa:	18 95       	reti

000006fc <__vector_7>:
 6fc:	1f 92       	push	r1
 6fe:	0f 92       	push	r0
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	0f 92       	push	r0
 704:	11 24       	eor	r1, r1
 706:	2f 93       	push	r18
 708:	3f 93       	push	r19
 70a:	4f 93       	push	r20
 70c:	5f 93       	push	r21
 70e:	6f 93       	push	r22
 710:	7f 93       	push	r23
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	af 93       	push	r26
 718:	bf 93       	push	r27
 71a:	ef 93       	push	r30
 71c:	ff 93       	push	r31
 71e:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ElevatorTick.1962>
 722:	8f 5f       	subi	r24, 0xFF	; 255
 724:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ElevatorTick.1962>
 728:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__data_end>
 72c:	9f 5f       	subi	r25, 0xFF	; 255
 72e:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__data_end>
 732:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Elevator+0x2>
 736:	0e 94 30 04 	call	0x860	; 0x860 <__udivmodqi4>
 73a:	91 11       	cpse	r25, r1
 73c:	14 c0       	rjmp	.+40     	; 0x766 <__vector_7+0x6a>
 73e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Elevator>
 742:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Elevator+0x1>
 746:	96 17       	cp	r25, r22
 748:	61 f0       	breq	.+24     	; 0x762 <__vector_7+0x66>
 74a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Elevator+0x4>
 74e:	89 0f       	add	r24, r25
 750:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Elevator>
 754:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Elevator+0x5>
 758:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Elevator+0x6>
 75c:	30 97       	sbiw	r30, 0x00	; 0
 75e:	09 f0       	breq	.+2      	; 0x762 <__vector_7+0x66>
 760:	09 95       	icall
 762:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <ElevatorTick.1962>
 766:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 76a:	6c e0       	ldi	r22, 0x0C	; 12
 76c:	0e 94 30 04 	call	0x860	; 0x860 <__udivmodqi4>
 770:	91 11       	cpse	r25, r1
 772:	04 c0       	rjmp	.+8      	; 0x77c <__vector_7+0x80>
 774:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
 778:	0e 94 50 01 	call	0x2a0	; 0x2a0 <MakeDoorStates>
 77c:	ff 91       	pop	r31
 77e:	ef 91       	pop	r30
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti

0000079e <__vector_10>:
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	cf 92       	push	r12
 7aa:	df 92       	push	r13
 7ac:	ff 92       	push	r15
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	ef 93       	push	r30
 7cc:	ff 93       	push	r31
 7ce:	0b e2       	ldi	r16, 0x2B	; 43
 7d0:	11 e0       	ldi	r17, 0x01	; 1
 7d2:	c0 e0       	ldi	r28, 0x00	; 0
 7d4:	d0 e0       	ldi	r29, 0x00	; 0
 7d6:	cc 24       	eor	r12, r12
 7d8:	c3 94       	inc	r12
 7da:	d1 2c       	mov	r13, r1
 7dc:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <UsedTimers>
 7e0:	8f 2d       	mov	r24, r15
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0c 2e       	mov	r0, r28
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__vector_10+0x4e>
 7e8:	95 95       	asr	r25
 7ea:	87 95       	ror	r24
 7ec:	0a 94       	dec	r0
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <__vector_10+0x4a>
 7f0:	80 ff       	sbrs	r24, 0
 7f2:	18 c0       	rjmp	.+48     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7f4:	f8 01       	movw	r30, r16
 7f6:	80 81       	ld	r24, Z
 7f8:	91 81       	ldd	r25, Z+1	; 0x01
 7fa:	01 97       	sbiw	r24, 0x01	; 1
 7fc:	91 83       	std	Z+1, r25	; 0x01
 7fe:	80 83       	st	Z, r24
 800:	89 2b       	or	r24, r25
 802:	81 f4       	brne	.+32     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	40 e0       	ldi	r20, 0x00	; 0
 808:	68 ec       	ldi	r22, 0xC8	; 200
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	0e 94 15 01 	call	0x22a	; 0x22a <SendEvent>
 810:	c6 01       	movw	r24, r12
 812:	0c 2e       	mov	r0, r28
 814:	01 c0       	rjmp	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 816:	88 0f       	add	r24, r24
 818:	0a 94       	dec	r0
 81a:	ea f7       	brpl	.-6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81c:	80 95       	com	r24
 81e:	f8 22       	and	r15, r24
 820:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <UsedTimers>
 824:	21 96       	adiw	r28, 0x01	; 1
 826:	0e 5f       	subi	r16, 0xFE	; 254
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	c8 30       	cpi	r28, 0x08	; 8
 82c:	d1 05       	cpc	r29, r1
 82e:	b1 f6       	brne	.-84     	; 0x7dc <__vector_10+0x3e>
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	bf 91       	pop	r27
 83a:	af 91       	pop	r26
 83c:	9f 91       	pop	r25
 83e:	8f 91       	pop	r24
 840:	7f 91       	pop	r23
 842:	6f 91       	pop	r22
 844:	5f 91       	pop	r21
 846:	4f 91       	pop	r20
 848:	3f 91       	pop	r19
 84a:	2f 91       	pop	r18
 84c:	1f 91       	pop	r17
 84e:	0f 91       	pop	r16
 850:	ff 90       	pop	r15
 852:	df 90       	pop	r13
 854:	cf 90       	pop	r12
 856:	0f 90       	pop	r0
 858:	0f be       	out	0x3f, r0	; 63
 85a:	0f 90       	pop	r0
 85c:	1f 90       	pop	r1
 85e:	18 95       	reti

00000860 <__udivmodqi4>:
 860:	99 1b       	sub	r25, r25
 862:	79 e0       	ldi	r23, 0x09	; 9
 864:	04 c0       	rjmp	.+8      	; 0x86e <__udivmodqi4_ep>

00000866 <__udivmodqi4_loop>:
 866:	99 1f       	adc	r25, r25
 868:	96 17       	cp	r25, r22
 86a:	08 f0       	brcs	.+2      	; 0x86e <__udivmodqi4_ep>
 86c:	96 1b       	sub	r25, r22

0000086e <__udivmodqi4_ep>:
 86e:	88 1f       	adc	r24, r24
 870:	7a 95       	dec	r23
 872:	c9 f7       	brne	.-14     	; 0x866 <__udivmodqi4_loop>
 874:	80 95       	com	r24
 876:	08 95       	ret

00000878 <_exit>:
 878:	f8 94       	cli

0000087a <__stop_program>:
 87a:	ff cf       	rjmp	.-2      	; 0x87a <__stop_program>
